
hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088fc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dc8  08008dc8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd0  08008dd0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008dd0  08008dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c50  20000080  08008e58  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd0  08008e58  00020cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001293a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000267a  00000000  00000000  000329e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001802c  00000000  00000000  000368f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a903  00000000  00000000  0004e91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ddd6  00000000  00000000  0005921f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6ff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  000e7070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008a7c 	.word	0x08008a7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08008a7c 	.word	0x08008a7c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a38:	f000 b972 	b.w	8000d20 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9e08      	ldr	r6, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4688      	mov	r8, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14b      	bne.n	8000afa <__udivmoddi4+0xa6>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4615      	mov	r5, r2
 8000a66:	d967      	bls.n	8000b38 <__udivmoddi4+0xe4>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b14a      	cbz	r2, 8000a82 <__udivmoddi4+0x2e>
 8000a6e:	f1c2 0720 	rsb	r7, r2, #32
 8000a72:	fa01 f302 	lsl.w	r3, r1, r2
 8000a76:	fa20 f707 	lsr.w	r7, r0, r7
 8000a7a:	4095      	lsls	r5, r2
 8000a7c:	ea47 0803 	orr.w	r8, r7, r3
 8000a80:	4094      	lsls	r4, r2
 8000a82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a86:	0c23      	lsrs	r3, r4, #16
 8000a88:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a8c:	fa1f fc85 	uxth.w	ip, r5
 8000a90:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a98:	fb07 f10c 	mul.w	r1, r7, ip
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d909      	bls.n	8000ab4 <__udivmoddi4+0x60>
 8000aa0:	18eb      	adds	r3, r5, r3
 8000aa2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aa6:	f080 811b 	bcs.w	8000ce0 <__udivmoddi4+0x28c>
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	f240 8118 	bls.w	8000ce0 <__udivmoddi4+0x28c>
 8000ab0:	3f02      	subs	r7, #2
 8000ab2:	442b      	add	r3, r5
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000abc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac8:	45a4      	cmp	ip, r4
 8000aca:	d909      	bls.n	8000ae0 <__udivmoddi4+0x8c>
 8000acc:	192c      	adds	r4, r5, r4
 8000ace:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad2:	f080 8107 	bcs.w	8000ce4 <__udivmoddi4+0x290>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	f240 8104 	bls.w	8000ce4 <__udivmoddi4+0x290>
 8000adc:	3802      	subs	r0, #2
 8000ade:	442c      	add	r4, r5
 8000ae0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ae4:	eba4 040c 	sub.w	r4, r4, ip
 8000ae8:	2700      	movs	r7, #0
 8000aea:	b11e      	cbz	r6, 8000af4 <__udivmoddi4+0xa0>
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	2300      	movs	r3, #0
 8000af0:	e9c6 4300 	strd	r4, r3, [r6]
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0xbe>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	f000 80eb 	beq.w	8000cda <__udivmoddi4+0x286>
 8000b04:	2700      	movs	r7, #0
 8000b06:	e9c6 0100 	strd	r0, r1, [r6]
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f783 	clz	r7, r3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d147      	bne.n	8000baa <__udivmoddi4+0x156>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0xd0>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80fa 	bhi.w	8000d18 <__udivmoddi4+0x2c4>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d0e0      	beq.n	8000af4 <__udivmoddi4+0xa0>
 8000b32:	e9c6 4800 	strd	r4, r8, [r6]
 8000b36:	e7dd      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000b38:	b902      	cbnz	r2, 8000b3c <__udivmoddi4+0xe8>
 8000b3a:	deff      	udf	#255	; 0xff
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	f040 808f 	bne.w	8000c64 <__udivmoddi4+0x210>
 8000b46:	1b49      	subs	r1, r1, r5
 8000b48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4c:	fa1f f885 	uxth.w	r8, r5
 8000b50:	2701      	movs	r7, #1
 8000b52:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b56:	0c23      	lsrs	r3, r4, #16
 8000b58:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb08 f10c 	mul.w	r1, r8, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x124>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x122>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	f200 80cd 	bhi.w	8000d10 <__udivmoddi4+0x2bc>
 8000b76:	4684      	mov	ip, r0
 8000b78:	1a59      	subs	r1, r3, r1
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b80:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b88:	fb08 f800 	mul.w	r8, r8, r0
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x14c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x14a>
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	f200 80b6 	bhi.w	8000d0a <__udivmoddi4+0x2b6>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 0408 	sub.w	r4, r4, r8
 8000ba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba8:	e79f      	b.n	8000aea <__udivmoddi4+0x96>
 8000baa:	f1c7 0c20 	rsb	ip, r7, #32
 8000bae:	40bb      	lsls	r3, r7
 8000bb0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bb4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bbc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc8:	4325      	orrs	r5, r4
 8000bca:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bce:	0c2c      	lsrs	r4, r5, #16
 8000bd0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bd4:	fa1f fa8e 	uxth.w	sl, lr
 8000bd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bdc:	fb09 f40a 	mul.w	r4, r9, sl
 8000be0:	429c      	cmp	r4, r3
 8000be2:	fa02 f207 	lsl.w	r2, r2, r7
 8000be6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b0>
 8000bec:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf4:	f080 8087 	bcs.w	8000d06 <__udivmoddi4+0x2b2>
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	f240 8084 	bls.w	8000d06 <__udivmoddi4+0x2b2>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4473      	add	r3, lr
 8000c04:	1b1b      	subs	r3, r3, r4
 8000c06:	b2ad      	uxth	r5, r5
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c14:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c18:	45a2      	cmp	sl, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1da>
 8000c1c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c24:	d26b      	bcs.n	8000cfe <__udivmoddi4+0x2aa>
 8000c26:	45a2      	cmp	sl, r4
 8000c28:	d969      	bls.n	8000cfe <__udivmoddi4+0x2aa>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4474      	add	r4, lr
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	fba0 8902 	umull	r8, r9, r0, r2
 8000c36:	eba4 040a 	sub.w	r4, r4, sl
 8000c3a:	454c      	cmp	r4, r9
 8000c3c:	46c2      	mov	sl, r8
 8000c3e:	464b      	mov	r3, r9
 8000c40:	d354      	bcc.n	8000cec <__udivmoddi4+0x298>
 8000c42:	d051      	beq.n	8000ce8 <__udivmoddi4+0x294>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d069      	beq.n	8000d1c <__udivmoddi4+0x2c8>
 8000c48:	ebb1 050a 	subs.w	r5, r1, sl
 8000c4c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c54:	40fd      	lsrs	r5, r7
 8000c56:	40fc      	lsrs	r4, r7
 8000c58:	ea4c 0505 	orr.w	r5, ip, r5
 8000c5c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c60:	2700      	movs	r7, #0
 8000c62:	e747      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f703 	lsr.w	r7, r0, r3
 8000c6c:	4095      	lsls	r5, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	fa21 f303 	lsr.w	r3, r1, r3
 8000c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7a:	4338      	orrs	r0, r7
 8000c7c:	0c01      	lsrs	r1, r0, #16
 8000c7e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c82:	fa1f f885 	uxth.w	r8, r5
 8000c86:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb07 f308 	mul.w	r3, r7, r8
 8000c92:	428b      	cmp	r3, r1
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x256>
 8000c9a:	1869      	adds	r1, r5, r1
 8000c9c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca0:	d22f      	bcs.n	8000d02 <__udivmoddi4+0x2ae>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d92d      	bls.n	8000d02 <__udivmoddi4+0x2ae>
 8000ca6:	3f02      	subs	r7, #2
 8000ca8:	4429      	add	r1, r5
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	b281      	uxth	r1, r0
 8000cae:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cba:	fb00 f308 	mul.w	r3, r0, r8
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x27e>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc8:	d217      	bcs.n	8000cfa <__udivmoddi4+0x2a6>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d915      	bls.n	8000cfa <__udivmoddi4+0x2a6>
 8000cce:	3802      	subs	r0, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd8:	e73b      	b.n	8000b52 <__udivmoddi4+0xfe>
 8000cda:	4637      	mov	r7, r6
 8000cdc:	4630      	mov	r0, r6
 8000cde:	e709      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000ce0:	4607      	mov	r7, r0
 8000ce2:	e6e7      	b.n	8000ab4 <__udivmoddi4+0x60>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e6fb      	b.n	8000ae0 <__udivmoddi4+0x8c>
 8000ce8:	4541      	cmp	r1, r8
 8000cea:	d2ab      	bcs.n	8000c44 <__udivmoddi4+0x1f0>
 8000cec:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	e7a4      	b.n	8000c44 <__udivmoddi4+0x1f0>
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	e7e9      	b.n	8000cd2 <__udivmoddi4+0x27e>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	e795      	b.n	8000c2e <__udivmoddi4+0x1da>
 8000d02:	4667      	mov	r7, ip
 8000d04:	e7d1      	b.n	8000caa <__udivmoddi4+0x256>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e77c      	b.n	8000c04 <__udivmoddi4+0x1b0>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	442c      	add	r4, r5
 8000d0e:	e747      	b.n	8000ba0 <__udivmoddi4+0x14c>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	442b      	add	r3, r5
 8000d16:	e72f      	b.n	8000b78 <__udivmoddi4+0x124>
 8000d18:	4638      	mov	r0, r7
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xda>
 8000d1c:	4637      	mov	r7, r6
 8000d1e:	e6e9      	b.n	8000af4 <__udivmoddi4+0xa0>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	0a5a      	lsrs	r2, r3, #9
 8000d34:	490f      	ldr	r1, [pc, #60]	; (8000d74 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d36:	fba1 1202 	umull	r1, r2, r1, r2
 8000d3a:	09d2      	lsrs	r2, r2, #7
 8000d3c:	490e      	ldr	r1, [pc, #56]	; (8000d78 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000d3e:	fb01 f202 	mul.w	r2, r1, r2
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	0a5b      	lsrs	r3, r3, #9
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	09db      	lsrs	r3, r3, #7
 8000d54:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	00044b83 	.word	0x00044b83
 8000d78:	3b9aca00 	.word	0x3b9aca00

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f004 fa48 	bl	8005214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f80e 	bl	8000da4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f908 	bl	8000f9c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000d8c:	f000 f8de 	bl	8000f4c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000d90:	f000 f8ae 	bl	8000ef0 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000d94:	f000 f878 	bl	8000e88 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

setup();
 8000d98:	f003 f99c 	bl	80040d4 <setup>
		// Pobranie 6 bajtow danych zawierajacych przyspieszenia w 3 osiach

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 loop();
 8000d9c:	f003 f9bc 	bl	8004118 <loop>
 8000da0:	e7fc      	b.n	8000d9c <main+0x20>
	...

08000da4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	; 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f007 fd25 	bl	8008802 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <_Z18SystemClock_Configv+0xdc>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a2b      	ldr	r2, [pc, #172]	; (8000e80 <_Z18SystemClock_Configv+0xdc>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <_Z18SystemClock_Configv+0xdc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <_Z18SystemClock_Configv+0xe0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <_Z18SystemClock_Configv+0xe0>)
 8000dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <_Z18SystemClock_Configv+0xe0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e14:	2308      	movs	r3, #8
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e18:	2364      	movs	r3, #100	; 0x64
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 f88f 	bl	8006f4c <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000e3e:	f000 f8ff 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2302      	movs	r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fae4 	bl	800742c <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bf14      	ite	ne
 8000e6a:	2301      	movne	r3, #1
 8000e6c:	2300      	moveq	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000e74:	f000 f8e4 	bl	8001040 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3750      	adds	r7, #80	; 0x50
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <_ZL12MX_I2C1_Initv+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <_ZL12MX_I2C1_Initv+0x64>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ec6:	f005 f891 	bl	8005fec <HAL_I2C_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000eda:	f000 f8b1 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000009c 	.word	0x2000009c
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	00061a80 	.word	0x00061a80

08000ef0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ef6:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f28:	f006 fc4c 	bl	80077c4 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000f3c:	f000 f880 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000f0 	.word	0x200000f0
 8000f48:	40004400 	.word	0x40004400

08000f4c <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_ZL11MX_DMA_Initv+0x4c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <_ZL11MX_DMA_Initv+0x4c>)
 8000f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <_ZL11MX_DMA_Initv+0x4c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2010      	movs	r0, #16
 8000f74:	f004 fabd 	bl	80054f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f004 fad6 	bl	800552a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2011      	movs	r0, #17
 8000f84:	f004 fab5 	bl	80054f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f88:	2011      	movs	r0, #17
 8000f8a:	f004 face 	bl	800552a <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <_ZL12MX_GPIO_Initv+0xa0>)
 800100e:	f004 ffb9 	bl	8005f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <_ZL12MX_GPIO_Initv+0xa0>)
 800102c:	f004 fe28 	bl	8005c80 <HAL_GPIO_Init>

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40020c00 	.word	0x40020c00

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <_ZN3ros3MsgC1Ev+0x1c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	08008d98 	.word	0x08008d98

08001090 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
      data()
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffe8 	bl	8001070 <_ZN3ros3MsgC1Ev>
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3304      	adds	r3, #4
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffcf 	bl	800104e <_ZN3ros4TimeC1Ev>
    {
    }
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08008d80 	.word	0x08008d80

080010c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6859      	ldr	r1, [r3, #4]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2ca      	uxtb	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	0a19      	lsrs	r1, r3, #8
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	b2ca      	uxtb	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	0c19      	lsrs	r1, r3, #16
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3302      	adds	r3, #2
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	b2ca      	uxtb	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	0e19      	lsrs	r1, r3, #24
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3303      	adds	r3, #3
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3304      	adds	r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6899      	ldr	r1, [r3, #8]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	0a19      	lsrs	r1, r3, #8
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	4413      	add	r3, r2
 8001134:	b2ca      	uxtb	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	0c19      	lsrs	r1, r3, #16
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3302      	adds	r3, #2
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	0e19      	lsrs	r1, r3, #24
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3303      	adds	r3, #3
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b2ca      	uxtb	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3304      	adds	r3, #4
 8001160:	60fb      	str	r3, [r7, #12]
      return offset;
 8001162:	68fb      	ldr	r3, [r7, #12]
    }
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	440b      	add	r3, r1
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3302      	adds	r3, #2
 80011aa:	6839      	ldr	r1, [r7, #0]
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	041b      	lsls	r3, r3, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3303      	adds	r3, #3
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	440b      	add	r3, r1
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	061b      	lsls	r3, r3, #24
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3304      	adds	r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3301      	adds	r3, #1
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	440b      	add	r3, r1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3302      	adds	r3, #2
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	440b      	add	r3, r1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3303      	adds	r3, #3
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	440b      	add	r3, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3304      	adds	r3, #4
 8001228:	60fb      	str	r3, [r7, #12]
     return offset;
 800122a:	68fb      	ldr	r3, [r7, #12]
    }
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	08008a94 	.word	0x08008a94

08001254 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	08008aa4 	.word	0x08008aa4

08001270 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fef8 	bl	8001070 <_ZN3ros3MsgC1Ev>
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	809a      	strh	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
    {
    }
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	08008d68 	.word	0x08008d68
 80012b4:	08008ac8 	.word	0x08008ac8

080012b8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	8899      	ldrh	r1, [r3, #4]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2ca      	uxtb	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	889b      	ldrh	r3, [r3, #4]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b299      	uxth	r1, r3
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3301      	adds	r3, #1
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3302      	adds	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff70 	bl	80001d8 <strlen>
 80012f8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fffc 	bl	8004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3304      	adds	r3, #4
 800130c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	18d0      	adds	r0, r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4619      	mov	r1, r3
 800131c:	f007 fa66 	bl	80087ec <memcpy>
      offset += length_topic_name;
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4413      	add	r3, r2
 8001326:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff53 	bl	80001d8 <strlen>
 8001332:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	6979      	ldr	r1, [r7, #20]
 800133c:	4618      	mov	r0, r3
 800133e:	f002 ffdf 	bl	8004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	18d0      	adds	r0, r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4619      	mov	r1, r3
 8001356:	f007 fa49 	bl	80087ec <memcpy>
      offset += length_message_type;
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4413      	add	r3, r2
 8001360:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ff36 	bl	80001d8 <strlen>
 800136c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	4413      	add	r3, r2
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	4618      	mov	r0, r3
 8001378:	f002 ffc2 	bl	8004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3304      	adds	r3, #4
 8001380:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	18d0      	adds	r0, r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4619      	mov	r1, r3
 8001390:	f007 fa2c 	bl	80087ec <memcpy>
      offset += length_md5sum;
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4413      	add	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	0a19      	lsrs	r1, r3, #8
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	b2ca      	uxtb	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	0c19      	lsrs	r1, r3, #16
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3302      	adds	r3, #2
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	0e19      	lsrs	r1, r3, #24
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3303      	adds	r3, #3
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	61fb      	str	r3, [r7, #28]
      return offset;
 80013e4:	69fb      	ldr	r3, [r7, #28]
    }
 80013e6:	4618      	mov	r0, r3
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b08a      	sub	sp, #40	; 0x28
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	889b      	ldrh	r3, [r3, #4]
 800140e:	b21a      	sxth	r2, r3
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	3301      	adds	r3, #1
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	440b      	add	r3, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3302      	adds	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	441a      	add	r2, r3
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ff7e 	bl	800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3304      	adds	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4413      	add	r3, r2
 8001450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001452:	429a      	cmp	r2, r3
 8001454:	d20c      	bcs.n	8001470 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	441a      	add	r2, r3
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3b01      	subs	r3, #1
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	440b      	add	r3, r1
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	3301      	adds	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
 800146e:	e7ec      	b.n	800144a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	4413      	add	r3, r2
 8001476:	3b01      	subs	r3, #1
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	3b01      	subs	r3, #1
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	441a      	add	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	441a      	add	r2, r3
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 ff4b 	bl	800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3304      	adds	r3, #4
 80014aa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	623b      	str	r3, [r7, #32]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4413      	add	r3, r2
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d20c      	bcs.n	80014d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	441a      	add	r2, r3
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	440b      	add	r3, r1
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	3301      	adds	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	e7ec      	b.n	80014b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4413      	add	r3, r2
 80014dc:	3b01      	subs	r3, #1
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	441a      	add	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	441a      	add	r2, r3
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f002 ff18 	bl	800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	3304      	adds	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	429a      	cmp	r2, r3
 8001520:	d20c      	bcs.n	800153c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	441a      	add	r2, r3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3b01      	subs	r3, #1
 800152c:	6839      	ldr	r1, [r7, #0]
 800152e:	440b      	add	r3, r1
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3301      	adds	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e7ec      	b.n	8001516 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	3b01      	subs	r3, #1
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	3b01      	subs	r3, #1
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	441a      	add	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	440a      	add	r2, r1
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3301      	adds	r3, #1
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	440b      	add	r3, r1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	4313      	orrs	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	3302      	adds	r3, #2
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	440b      	add	r3, r1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	4313      	orrs	r3, r2
 8001594:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3303      	adds	r3, #3
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	440b      	add	r3, r1
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	061b      	lsls	r3, r3, #24
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3304      	adds	r3, #4
 80015b2:	61bb      	str	r3, [r7, #24]
     return offset;
 80015b4:	69bb      	ldr	r3, [r7, #24]
    }
 80015b6:	4618      	mov	r0, r3
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	08008acc 	.word	0x08008acc

080015dc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08008ae8 	.word	0x08008ae8

080015f8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fd34 	bl	8001070 <_ZN3ros3MsgC1Ev>
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	711a      	strb	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001618:	609a      	str	r2, [r3, #8]
    {
    }
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	08008d50 	.word	0x08008d50
 8001628:	08008ac8 	.word	0x08008ac8

0800162c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	7912      	ldrb	r2, [r2, #4]
 8001644:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fdc1 	bl	80001d8 <strlen>
 8001656:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fe4d 	bl	8004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3304      	adds	r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	18d0      	adds	r0, r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	4619      	mov	r1, r3
 800167a:	f007 f8b7 	bl	80087ec <memcpy>
      offset += length_msg;
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
      return offset;
 8001686:	68fb      	ldr	r3, [r7, #12]
    }
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	3301      	adds	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	441a      	add	r2, r3
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fe3d 	bl	800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	3304      	adds	r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d20c      	bcs.n	80016f2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	441a      	add	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	440b      	add	r3, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e7ec      	b.n	80016cc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	3b01      	subs	r3, #1
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3b01      	subs	r3, #1
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
     return offset;
 8001716:	693b      	ldr	r3, [r7, #16]
    }
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	08008b0c 	.word	0x08008b0c

0800173c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	08008b20 	.word	0x08008b20

08001758 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc84 	bl	8001070 <_ZN3ros3MsgC1Ev>
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	08008d38 	.word	0x08008d38

080017a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	b2ca      	uxtb	r2, r1
 80017ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0a19      	lsrs	r1, r3, #8
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	b2ca      	uxtb	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c19      	lsrs	r1, r3, #16
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	3302      	adds	r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0e19      	lsrs	r1, r3, #24
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	3303      	adds	r3, #3
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3304      	adds	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	429a      	cmp	r2, r3
 8001804:	d22b      	bcs.n	800185e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001814:	6939      	ldr	r1, [r7, #16]
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	b2ca      	uxtb	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	0a19      	lsrs	r1, r3, #8
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3301      	adds	r3, #1
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b2ca      	uxtb	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	0c19      	lsrs	r1, r3, #16
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	3302      	adds	r3, #2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	0e19      	lsrs	r1, r3, #24
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3303      	adds	r3, #3
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	3304      	adds	r3, #4
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	3301      	adds	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	e7ce      	b.n	80017fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	b2ca      	uxtb	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	0a19      	lsrs	r1, r3, #8
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4413      	add	r3, r2
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	0c19      	lsrs	r1, r3, #16
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	3302      	adds	r3, #2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	4413      	add	r3, r2
 800188c:	b2ca      	uxtb	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	0e19      	lsrs	r1, r3, #24
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	3303      	adds	r3, #3
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	4413      	add	r3, r2
 800189e:	b2ca      	uxtb	r2, r1
 80018a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3304      	adds	r3, #4
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d22b      	bcs.n	800190e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80018c4:	68f9      	ldr	r1, [r7, #12]
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	0a19      	lsrs	r1, r3, #8
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3301      	adds	r3, #1
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	b2ca      	uxtb	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	0c19      	lsrs	r1, r3, #16
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3302      	adds	r3, #2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	0e19      	lsrs	r1, r3, #24
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3303      	adds	r3, #3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3304      	adds	r3, #4
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	e7ce      	b.n	80018ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69d9      	ldr	r1, [r3, #28]
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	0a19      	lsrs	r1, r3, #8
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	0c19      	lsrs	r1, r3, #16
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	3302      	adds	r3, #2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	b2ca      	uxtb	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	0e19      	lsrs	r1, r3, #24
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3303      	adds	r3, #3
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	3304      	adds	r3, #4
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	429a      	cmp	r2, r3
 8001964:	d228      	bcs.n	80019b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc30 	bl	80001d8 <strlen>
 8001978:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	6979      	ldr	r1, [r7, #20]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fcbc 	bl	8004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3304      	adds	r3, #4
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	18d0      	adds	r0, r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4619      	mov	r1, r3
 80019a4:	f006 ff22 	bl	80087ec <memcpy>
      offset += length_stringsi;
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	3301      	adds	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e7d1      	b.n	800195c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80019ba:	4618      	mov	r0, r3
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b08e      	sub	sp, #56	; 0x38
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019dc:	3301      	adds	r3, #1
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	6a3a      	ldr	r2, [r7, #32]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ee:	3302      	adds	r3, #2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a00:	3303      	adds	r3, #3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a12:	3304      	adds	r3, #4
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d90a      	bls.n	8001a36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f006 fef2 	bl	8008814 <realloc>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d236      	bcs.n	8001ab8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	440a      	add	r2, r1
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	440b      	add	r3, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a72:	3302      	adds	r3, #2
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	440b      	add	r3, r1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	3303      	adds	r3, #3
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	440b      	add	r3, r1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab6:	e7c3      	b.n	8001a40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	3303      	adds	r3, #3
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	3304      	adds	r3, #4
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d90a      	bls.n	8001b1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f006 fe7e 	bl	8008814 <realloc>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d236      	bcs.n	8001ba0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	440a      	add	r2, r1
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	3301      	adds	r3, #1
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	440b      	add	r3, r1
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	440b      	add	r3, r1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	440b      	add	r3, r1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	3304      	adds	r3, #4
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	3214      	adds	r2, #20
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9e:	e7c3      	b.n	8001b28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	3301      	adds	r3, #1
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be2:	3304      	adds	r3, #4
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d90a      	bls.n	8001c06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f006 fe0a 	bl	8008814 <realloc>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d23f      	bcs.n	8001c9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	441a      	add	r2, r3
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 fb88 	bl	800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2e:	3304      	adds	r3, #4
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d20c      	bcs.n	8001c5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	441a      	add	r2, r3
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	440b      	add	r3, r1
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3301      	adds	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e7ec      	b.n	8001c36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	3b01      	subs	r3, #1
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	441a      	add	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	3220      	adds	r2, #32
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	3301      	adds	r3, #1
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c98:	e7ba      	b.n	8001c10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3738      	adds	r7, #56	; 0x38
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	08008c8c 	.word	0x08008c8c

08001cc0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	08008b44 	.word	0x08008b44

08001cdc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68d8      	ldr	r0, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6891      	ldr	r1, [r2, #8]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	4798      	blx	r3
 8001d28:	4603      	mov	r3, r0
  };
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
  }
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	425b      	negs	r3, r3
 8001d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <_ZN13STM32HardwareC1Ev+0x34>)
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	200000f0 	.word	0x200000f0

08001da8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f804 	bl	8001dbe <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f005 fdb0 	bl	8007938 <HAL_UART_Receive_DMA>
    }
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffa8 	bl	8001d4a <_ZN13STM32Hardware10getRdmaIndEv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	791b      	ldrb	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e30:	68fb      	ldr	r3, [r7, #12]
    }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
	...

08001e3c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d108      	bne.n	8001e64 <_ZN13STM32Hardware5flushEv+0x28>
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <_ZN13STM32Hardware5flushEv+0x28>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <_ZN13STM32Hardware5flushEv+0x2a>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03f      	beq.n	8001eea <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d031      	beq.n	8001ee4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d20a      	bcs.n	8001ea6 <_ZN13STM32Hardware5flushEv+0x6a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	e006      	b.n	8001eb4 <_ZN13STM32Hardware5flushEv+0x78>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ec0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	89fa      	ldrh	r2, [r7, #14]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f005 fcc8 	bl	8007860 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
      }
    }
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200001f0 	.word	0x200001f0

08001ef8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
      int n = length;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0e:	bfa8      	it	ge
 8001f10:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001f14:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f1c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	bf28      	it	cs
 8001f26:	4613      	movcs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f006 fc55 	bl	80087ec <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d00b      	beq.n	8001f76 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	18d1      	adds	r1, r2, r3
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	f006 fc3b 	bl	80087ec <memcpy>
      }

      flush();
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff ff60 	bl	8001e3c <_ZN13STM32Hardware5flushEv>
    }
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	f003 f9a8 	bl	80052e0 <HAL_GetTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f862 	bl	8001070 <_ZN3ros3MsgC1Ev>
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3308      	adds	r3, #8
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f846 	bl	800104e <_ZN3ros4TimeC1Ev>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8001fc6:	611a      	str	r2, [r3, #16]
    {
    }
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	08008d0c 	.word	0x08008d0c
 8001fd8:	08008ac8 	.word	0x08008ac8

08001fdc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0a19      	lsrs	r1, r3, #8
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0c19      	lsrs	r1, r3, #16
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3302      	adds	r3, #2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0e19      	lsrs	r1, r3, #24
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3303      	adds	r3, #3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	b2ca      	uxtb	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4413      	add	r3, r2
 800203e:	b2ca      	uxtb	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0a19      	lsrs	r1, r3, #8
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	b2ca      	uxtb	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	0c19      	lsrs	r1, r3, #16
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3302      	adds	r3, #2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0e19      	lsrs	r1, r3, #24
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3303      	adds	r3, #3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	b2ca      	uxtb	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3304      	adds	r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a19      	lsrs	r1, r3, #8
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3301      	adds	r3, #1
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	b2ca      	uxtb	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0c19      	lsrs	r1, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3302      	adds	r3, #2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	b2ca      	uxtb	r2, r1
 80020ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0e19      	lsrs	r1, r3, #24
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3303      	adds	r3, #3
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	b2ca      	uxtb	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f883 	bl	80001d8 <strlen>
 80020d2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f90f 	bl	8004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3304      	adds	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	18d0      	adds	r0, r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f006 fb79 	bl	80087ec <memcpy>
      offset += length_frame_id;
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
      return offset;
 8002102:	68fb      	ldr	r3, [r7, #12]
    }
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	3301      	adds	r3, #1
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	440b      	add	r3, r1
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	3302      	adds	r3, #2
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	440b      	add	r3, r1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	041b      	lsls	r3, r3, #16
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	3303      	adds	r3, #3
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	440b      	add	r3, r1
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	3304      	adds	r3, #4
 800216e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3301      	adds	r3, #1
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	440b      	add	r3, r1
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	3302      	adds	r3, #2
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	440b      	add	r3, r1
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	3303      	adds	r3, #3
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	440b      	add	r3, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3304      	adds	r3, #4
 80021c4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	3301      	adds	r3, #1
 80021dc:	6839      	ldr	r1, [r7, #0]
 80021de:	440b      	add	r3, r1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	3302      	adds	r3, #2
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	440b      	add	r3, r1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3303      	adds	r3, #3
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	440b      	add	r3, r1
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3304      	adds	r3, #4
 800221a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	441a      	add	r2, r3
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f002 f887 	bl	800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	3304      	adds	r3, #4
 8002232:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	d20c      	bcs.n	800225e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	441a      	add	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3b01      	subs	r3, #1
 800224e:	6839      	ldr	r1, [r7, #0]
 8002250:	440b      	add	r3, r1
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e7ec      	b.n	8002238 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	3b01      	subs	r3, #1
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3b01      	subs	r3, #1
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	441a      	add	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
     return offset;
 8002282:	693b      	ldr	r3, [r7, #16]
    }
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	08008b68 	.word	0x08008b68

080022a8 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	08008b78 	.word	0x08008b78

080022c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fece 	bl	8001070 <_ZN3ros3MsgC1Ev>
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	f04f 0400 	mov.w	r4, #0
 80022e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f04f 0400 	mov.w	r4, #0
 80022f2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	f04f 0400 	mov.w	r4, #0
 8002300:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bd90      	pop	{r4, r7, pc}
 800230e:	bf00      	nop
 8002310:	08008cf4 	.word	0x08008cf4

08002314 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002314:	b490      	push	{r4, r7}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002328:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800232c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	440a      	add	r2, r1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800233a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	f04f 0400 	mov.w	r4, #0
 8002346:	0a0b      	lsrs	r3, r1, #8
 8002348:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800234c:	0a14      	lsrs	r4, r2, #8
 800234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002350:	3201      	adds	r2, #1
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	440a      	add	r2, r1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800235a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	f04f 0400 	mov.w	r4, #0
 8002366:	0c0b      	lsrs	r3, r1, #16
 8002368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800236c:	0c14      	lsrs	r4, r2, #16
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	3202      	adds	r2, #2
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	440a      	add	r2, r1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800237a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	f04f 0400 	mov.w	r4, #0
 8002386:	0e0b      	lsrs	r3, r1, #24
 8002388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800238c:	0e14      	lsrs	r4, r2, #24
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	3203      	adds	r2, #3
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	440a      	add	r2, r1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800239a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	0013      	movs	r3, r2
 80023a8:	2400      	movs	r4, #0
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	3204      	adds	r2, #4
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	440a      	add	r2, r1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80023b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	f04f 0400 	mov.w	r4, #0
 80023c2:	0a13      	lsrs	r3, r2, #8
 80023c4:	2400      	movs	r4, #0
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	3205      	adds	r2, #5
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	440a      	add	r2, r1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80023d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	f04f 0400 	mov.w	r4, #0
 80023de:	0c13      	lsrs	r3, r2, #16
 80023e0:	2400      	movs	r4, #0
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	3206      	adds	r2, #6
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	440a      	add	r2, r1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80023ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	f04f 0400 	mov.w	r4, #0
 80023fa:	0e13      	lsrs	r3, r2, #24
 80023fc:	2400      	movs	r4, #0
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	3207      	adds	r2, #7
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	440a      	add	r2, r1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3308      	adds	r3, #8
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002416:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800241a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800241e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	440a      	add	r2, r1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002428:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	0a0b      	lsrs	r3, r1, #8
 8002436:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800243a:	0a14      	lsrs	r4, r2, #8
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	3201      	adds	r2, #1
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	440a      	add	r2, r1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002448:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	f04f 0400 	mov.w	r4, #0
 8002454:	0c0b      	lsrs	r3, r1, #16
 8002456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800245a:	0c14      	lsrs	r4, r2, #16
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	3202      	adds	r2, #2
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	440a      	add	r2, r1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002468:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	0e0b      	lsrs	r3, r1, #24
 8002476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800247a:	0e14      	lsrs	r4, r2, #24
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	3203      	adds	r2, #3
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	440a      	add	r2, r1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002488:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f04f 0400 	mov.w	r4, #0
 8002494:	0013      	movs	r3, r2
 8002496:	2400      	movs	r4, #0
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	3204      	adds	r2, #4
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	440a      	add	r2, r1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80024a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	f04f 0400 	mov.w	r4, #0
 80024b0:	0a13      	lsrs	r3, r2, #8
 80024b2:	2400      	movs	r4, #0
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	3205      	adds	r2, #5
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	440a      	add	r2, r1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80024c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	f04f 0400 	mov.w	r4, #0
 80024cc:	0c13      	lsrs	r3, r2, #16
 80024ce:	2400      	movs	r4, #0
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	3206      	adds	r2, #6
 80024d4:	6839      	ldr	r1, [r7, #0]
 80024d6:	440a      	add	r2, r1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80024dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	f04f 0400 	mov.w	r4, #0
 80024e8:	0e13      	lsrs	r3, r2, #24
 80024ea:	2400      	movs	r4, #0
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	3207      	adds	r2, #7
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	440a      	add	r2, r1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	3308      	adds	r3, #8
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002504:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002508:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	440a      	add	r2, r1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002516:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	f04f 0400 	mov.w	r4, #0
 8002522:	0a0b      	lsrs	r3, r1, #8
 8002524:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002528:	0a14      	lsrs	r4, r2, #8
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	3201      	adds	r2, #1
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	440a      	add	r2, r1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002536:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f04f 0400 	mov.w	r4, #0
 8002542:	0c0b      	lsrs	r3, r1, #16
 8002544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002548:	0c14      	lsrs	r4, r2, #16
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	3202      	adds	r2, #2
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	440a      	add	r2, r1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002556:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	f04f 0400 	mov.w	r4, #0
 8002562:	0e0b      	lsrs	r3, r1, #24
 8002564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002568:	0e14      	lsrs	r4, r2, #24
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	3203      	adds	r2, #3
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	440a      	add	r2, r1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002576:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	f04f 0400 	mov.w	r4, #0
 8002582:	0013      	movs	r3, r2
 8002584:	2400      	movs	r4, #0
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	3204      	adds	r2, #4
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	440a      	add	r2, r1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002592:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	f04f 0400 	mov.w	r4, #0
 800259e:	0a13      	lsrs	r3, r2, #8
 80025a0:	2400      	movs	r4, #0
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	3205      	adds	r2, #5
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	440a      	add	r2, r1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80025ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	0c13      	lsrs	r3, r2, #16
 80025bc:	2400      	movs	r4, #0
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	3206      	adds	r2, #6
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	440a      	add	r2, r1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80025ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	f04f 0400 	mov.w	r4, #0
 80025d6:	0e13      	lsrs	r3, r2, #24
 80025d8:	2400      	movs	r4, #0
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	3207      	adds	r2, #7
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	440a      	add	r2, r1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3308      	adds	r3, #8
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025ee:	4618      	mov	r0, r3
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc90      	pop	{r4, r7}
 80025f6:	4770      	bx	lr

080025f8 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80025fc:	b08c      	sub	sp, #48	; 0x30
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	f04f 0400 	mov.w	r4, #0
 8002610:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002614:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	68b8      	ldr	r0, [r7, #8]
 800261c:	4403      	add	r3, r0
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461c      	mov	r4, r3
 8002622:	b2e4      	uxtb	r4, r4
 8002624:	f04f 0500 	mov.w	r5, #0
 8002628:	4623      	mov	r3, r4
 800262a:	462c      	mov	r4, r5
 800262c:	ea43 0301 	orr.w	r3, r3, r1
 8002630:	ea44 0402 	orr.w	r4, r4, r2
 8002634:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002638:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800263c:	461d      	mov	r5, r3
 800263e:	4626      	mov	r6, r4
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	3301      	adds	r3, #1
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	0214      	lsls	r4, r2, #8
 800265a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800265e:	020b      	lsls	r3, r1, #8
 8002660:	4629      	mov	r1, r5
 8002662:	4632      	mov	r2, r6
 8002664:	ea41 0103 	orr.w	r1, r1, r3
 8002668:	ea42 0204 	orr.w	r2, r2, r4
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002674:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002678:	461d      	mov	r5, r3
 800267a:	4626      	mov	r6, r4
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	3302      	adds	r3, #2
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2d9      	uxtb	r1, r3
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f04f 0400 	mov.w	r4, #0
 8002694:	0414      	lsls	r4, r2, #16
 8002696:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800269a:	040b      	lsls	r3, r1, #16
 800269c:	4629      	mov	r1, r5
 800269e:	4632      	mov	r2, r6
 80026a0:	ea41 0103 	orr.w	r1, r1, r3
 80026a4:	ea42 0204 	orr.w	r2, r2, r4
 80026a8:	460b      	mov	r3, r1
 80026aa:	4614      	mov	r4, r2
 80026ac:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	3303      	adds	r3, #3
 80026b8:	68b8      	ldr	r0, [r7, #8]
 80026ba:	4403      	add	r3, r0
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80026c8:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80026cc:	ea41 030a 	orr.w	r3, r1, sl
 80026d0:	ea42 040b 	orr.w	r4, r2, fp
 80026d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80026d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	3304      	adds	r3, #4
 80026e0:	68b8      	ldr	r0, [r7, #8]
 80026e2:	4403      	add	r3, r0
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	fa5f fa83 	uxtb.w	sl, r3
 80026ea:	f04f 0b00 	mov.w	fp, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	4625      	mov	r5, r4
 80026f8:	461c      	mov	r4, r3
 80026fa:	4653      	mov	r3, sl
 80026fc:	461d      	mov	r5, r3
 80026fe:	2300      	movs	r3, #0
 8002700:	461c      	mov	r4, r3
 8002702:	4623      	mov	r3, r4
 8002704:	462c      	mov	r4, r5
 8002706:	ea43 0301 	orr.w	r3, r3, r1
 800270a:	ea44 0402 	orr.w	r4, r4, r2
 800270e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002712:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	3305      	adds	r3, #5
 800271a:	68b8      	ldr	r0, [r7, #8]
 800271c:	4403      	add	r3, r0
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	fa5f fa83 	uxtb.w	sl, r3
 8002724:	f04f 0b00 	mov.w	fp, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f04f 0400 	mov.w	r4, #0
 8002730:	4625      	mov	r5, r4
 8002732:	461c      	mov	r4, r3
 8002734:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8002738:	461d      	mov	r5, r3
 800273a:	2300      	movs	r3, #0
 800273c:	461c      	mov	r4, r3
 800273e:	4623      	mov	r3, r4
 8002740:	462c      	mov	r4, r5
 8002742:	ea43 0301 	orr.w	r3, r3, r1
 8002746:	ea44 0402 	orr.w	r4, r4, r2
 800274a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800274e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	3306      	adds	r3, #6
 8002756:	68b8      	ldr	r0, [r7, #8]
 8002758:	4403      	add	r3, r0
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	fa5f fa83 	uxtb.w	sl, r3
 8002760:	f04f 0b00 	mov.w	fp, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f04f 0400 	mov.w	r4, #0
 800276c:	4625      	mov	r5, r4
 800276e:	461c      	mov	r4, r3
 8002770:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002774:	461d      	mov	r5, r3
 8002776:	2300      	movs	r3, #0
 8002778:	461c      	mov	r4, r3
 800277a:	4623      	mov	r3, r4
 800277c:	462c      	mov	r4, r5
 800277e:	ea43 0301 	orr.w	r3, r3, r1
 8002782:	ea44 0402 	orr.w	r4, r4, r2
 8002786:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800278a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	3307      	adds	r3, #7
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	4403      	add	r3, r0
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	fa5f fa83 	uxtb.w	sl, r3
 800279c:	f04f 0b00 	mov.w	fp, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	f04f 0400 	mov.w	r4, #0
 80027a8:	4625      	mov	r5, r4
 80027aa:	461c      	mov	r4, r3
 80027ac:	ea4f 630a 	mov.w	r3, sl, lsl #24
 80027b0:	461d      	mov	r5, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	461c      	mov	r4, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	462c      	mov	r4, r5
 80027ba:	ea43 0301 	orr.w	r3, r3, r1
 80027be:	ea44 0402 	orr.w	r4, r4, r2
 80027c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 80027c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	3308      	adds	r3, #8
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	f04f 0400 	mov.w	r4, #0
 80027de:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	4403      	add	r3, r0
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	fa5f fa83 	uxtb.w	sl, r3
 80027f2:	f04f 0b00 	mov.w	fp, #0
 80027f6:	ea4a 0301 	orr.w	r3, sl, r1
 80027fa:	ea4b 0402 	orr.w	r4, fp, r2
 80027fe:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002802:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	3301      	adds	r3, #1
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2d9      	uxtb	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	f04f 0400 	mov.w	r4, #0
 800281e:	4625      	mov	r5, r4
 8002820:	461c      	mov	r4, r3
 8002822:	0213      	lsls	r3, r2, #8
 8002824:	461d      	mov	r5, r3
 8002826:	462b      	mov	r3, r5
 8002828:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800282c:	461d      	mov	r5, r3
 800282e:	020b      	lsls	r3, r1, #8
 8002830:	461c      	mov	r4, r3
 8002832:	4623      	mov	r3, r4
 8002834:	462c      	mov	r4, r5
 8002836:	ea43 030a 	orr.w	r3, r3, sl
 800283a:	ea44 040b 	orr.w	r4, r4, fp
 800283e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002842:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	3302      	adds	r3, #2
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b2d9      	uxtb	r1, r3
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	f04f 0400 	mov.w	r4, #0
 800285e:	4625      	mov	r5, r4
 8002860:	461c      	mov	r4, r3
 8002862:	0413      	lsls	r3, r2, #16
 8002864:	461d      	mov	r5, r3
 8002866:	462b      	mov	r3, r5
 8002868:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800286c:	461d      	mov	r5, r3
 800286e:	040b      	lsls	r3, r1, #16
 8002870:	461c      	mov	r4, r3
 8002872:	4623      	mov	r3, r4
 8002874:	462c      	mov	r4, r5
 8002876:	ea43 030a 	orr.w	r3, r3, sl
 800287a:	ea44 040b 	orr.w	r4, r4, fp
 800287e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002882:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	3303      	adds	r3, #3
 800288a:	68b8      	ldr	r0, [r7, #8]
 800288c:	4403      	add	r3, r0
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f04f 0400 	mov.w	r4, #0
 8002896:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800289a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800289e:	ea41 0308 	orr.w	r3, r1, r8
 80028a2:	ea42 0409 	orr.w	r4, r2, r9
 80028a6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	3304      	adds	r3, #4
 80028b2:	68b8      	ldr	r0, [r7, #8]
 80028b4:	4403      	add	r3, r0
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	fa5f f883 	uxtb.w	r8, r3
 80028bc:	f04f 0900 	mov.w	r9, #0
 80028c0:	f04f 0a00 	mov.w	sl, #0
 80028c4:	f04f 0b00 	mov.w	fp, #0
 80028c8:	46c3      	mov	fp, r8
 80028ca:	f04f 0a00 	mov.w	sl, #0
 80028ce:	ea4a 0301 	orr.w	r3, sl, r1
 80028d2:	ea4b 0402 	orr.w	r4, fp, r2
 80028d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	3305      	adds	r3, #5
 80028e2:	68b8      	ldr	r0, [r7, #8]
 80028e4:	4403      	add	r3, r0
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	fa5f f883 	uxtb.w	r8, r3
 80028ec:	f04f 0900 	mov.w	r9, #0
 80028f0:	f04f 0a00 	mov.w	sl, #0
 80028f4:	f04f 0b00 	mov.w	fp, #0
 80028f8:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 80028fc:	f04f 0a00 	mov.w	sl, #0
 8002900:	ea4a 0301 	orr.w	r3, sl, r1
 8002904:	ea4b 0402 	orr.w	r4, fp, r2
 8002908:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800290c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	3306      	adds	r3, #6
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	4403      	add	r3, r0
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	fa5f f883 	uxtb.w	r8, r3
 800291e:	f04f 0900 	mov.w	r9, #0
 8002922:	f04f 0a00 	mov.w	sl, #0
 8002926:	f04f 0b00 	mov.w	fp, #0
 800292a:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 800292e:	f04f 0a00 	mov.w	sl, #0
 8002932:	ea4a 0301 	orr.w	r3, sl, r1
 8002936:	ea4b 0402 	orr.w	r4, fp, r2
 800293a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800293e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	3307      	adds	r3, #7
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	4403      	add	r3, r0
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	fa5f f883 	uxtb.w	r8, r3
 8002950:	f04f 0900 	mov.w	r9, #0
 8002954:	f04f 0a00 	mov.w	sl, #0
 8002958:	f04f 0b00 	mov.w	fp, #0
 800295c:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8002960:	f04f 0a00 	mov.w	sl, #0
 8002964:	ea4a 0301 	orr.w	r3, sl, r1
 8002968:	ea4b 0402 	orr.w	r4, fp, r2
 800296c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8002970:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	3308      	adds	r3, #8
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800298c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	68b8      	ldr	r0, [r7, #8]
 8002994:	4403      	add	r3, r0
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	fa5f f883 	uxtb.w	r8, r3
 800299c:	f04f 0900 	mov.w	r9, #0
 80029a0:	ea48 0301 	orr.w	r3, r8, r1
 80029a4:	ea49 0402 	orr.w	r4, r9, r2
 80029a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	3301      	adds	r3, #1
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0a00 	mov.w	sl, #0
 80029c4:	f04f 0b00 	mov.w	fp, #0
 80029c8:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 80029cc:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 80029d0:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 80029d4:	ea4a 0308 	orr.w	r3, sl, r8
 80029d8:	ea4b 0409 	orr.w	r4, fp, r9
 80029dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029e0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	3302      	adds	r3, #2
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2d9      	uxtb	r1, r3
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0a00 	mov.w	sl, #0
 80029f8:	f04f 0b00 	mov.w	fp, #0
 80029fc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002a00:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002a04:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002a08:	ea4a 0308 	orr.w	r3, sl, r8
 8002a0c:	ea4b 0409 	orr.w	r4, fp, r9
 8002a10:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	3303      	adds	r3, #3
 8002a1c:	68b8      	ldr	r0, [r7, #8]
 8002a1e:	4403      	add	r3, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f04f 0400 	mov.w	r4, #0
 8002a28:	0a18      	lsrs	r0, r3, #8
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a34:	ea43 0301 	orr.w	r3, r3, r1
 8002a38:	ea44 0402 	orr.w	r4, r4, r2
 8002a3c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	3304      	adds	r3, #4
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	4403      	add	r3, r0
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2dd      	uxtb	r5, r3
 8002a50:	f04f 0600 	mov.w	r6, #0
 8002a54:	f04f 0800 	mov.w	r8, #0
 8002a58:	f04f 0900 	mov.w	r9, #0
 8002a5c:	46a9      	mov	r9, r5
 8002a5e:	f04f 0800 	mov.w	r8, #0
 8002a62:	ea48 0301 	orr.w	r3, r8, r1
 8002a66:	ea49 0402 	orr.w	r4, r9, r2
 8002a6a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	3305      	adds	r3, #5
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	4403      	add	r3, r0
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2dd      	uxtb	r5, r3
 8002a7e:	f04f 0600 	mov.w	r6, #0
 8002a82:	f04f 0800 	mov.w	r8, #0
 8002a86:	f04f 0900 	mov.w	r9, #0
 8002a8a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8002a8e:	f04f 0800 	mov.w	r8, #0
 8002a92:	ea48 0301 	orr.w	r3, r8, r1
 8002a96:	ea49 0402 	orr.w	r4, r9, r2
 8002a9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	68b8      	ldr	r0, [r7, #8]
 8002aa8:	4403      	add	r3, r0
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2dd      	uxtb	r5, r3
 8002aae:	f04f 0600 	mov.w	r6, #0
 8002ab2:	f04f 0800 	mov.w	r8, #0
 8002ab6:	f04f 0900 	mov.w	r9, #0
 8002aba:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8002abe:	f04f 0800 	mov.w	r8, #0
 8002ac2:	ea48 0301 	orr.w	r3, r8, r1
 8002ac6:	ea49 0402 	orr.w	r4, r9, r2
 8002aca:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ace:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	3307      	adds	r3, #7
 8002ad6:	68b8      	ldr	r0, [r7, #8]
 8002ad8:	4403      	add	r3, r0
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2dd      	uxtb	r5, r3
 8002ade:	f04f 0600 	mov.w	r6, #0
 8002ae2:	f04f 0800 	mov.w	r8, #0
 8002ae6:	f04f 0900 	mov.w	r9, #0
 8002aea:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8002aee:	f04f 0800 	mov.w	r8, #0
 8002af2:	ea48 0301 	orr.w	r3, r8, r1
 8002af6:	ea49 0402 	orr.w	r4, r9, r2
 8002afa:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8002afe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b1a:	4770      	bx	lr

08002b1c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	08008b9c 	.word	0x08008b9c

08002b38 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	08008bb4 	.word	0x08008bb4

08002b54 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fa86 	bl	8001070 <_ZN3ros3MsgC1Ev>
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f04f 0400 	mov.w	r4, #0
 8002b74:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	f04f 0400 	mov.w	r4, #0
 8002b82:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f04f 0400 	mov.w	r4, #0
 8002b90:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f04f 0400 	mov.w	r4, #0
 8002b9e:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	08008cdc 	.word	0x08008cdc

08002bb0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bb0:	b490      	push	{r4, r7}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002bc4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002bc8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002bd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f04f 0400 	mov.w	r4, #0
 8002be2:	0a0b      	lsrs	r3, r1, #8
 8002be4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002be8:	0a14      	lsrs	r4, r2, #8
 8002bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bec:	3201      	adds	r2, #1
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	440a      	add	r2, r1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002bf6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	f04f 0400 	mov.w	r4, #0
 8002c02:	0c0b      	lsrs	r3, r1, #16
 8002c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c08:	0c14      	lsrs	r4, r2, #16
 8002c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0c:	3202      	adds	r2, #2
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	440a      	add	r2, r1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002c16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f04f 0400 	mov.w	r4, #0
 8002c22:	0e0b      	lsrs	r3, r1, #24
 8002c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c28:	0e14      	lsrs	r4, r2, #24
 8002c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2c:	3203      	adds	r2, #3
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	440a      	add	r2, r1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	f04f 0400 	mov.w	r4, #0
 8002c42:	0013      	movs	r3, r2
 8002c44:	2400      	movs	r4, #0
 8002c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c48:	3204      	adds	r2, #4
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	0a13      	lsrs	r3, r2, #8
 8002c60:	2400      	movs	r4, #0
 8002c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c64:	3205      	adds	r2, #5
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	440a      	add	r2, r1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002c6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	f04f 0400 	mov.w	r4, #0
 8002c7a:	0c13      	lsrs	r3, r2, #16
 8002c7c:	2400      	movs	r4, #0
 8002c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c80:	3206      	adds	r2, #6
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	440a      	add	r2, r1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002c8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	0e13      	lsrs	r3, r2, #24
 8002c98:	2400      	movs	r4, #0
 8002c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9c:	3207      	adds	r2, #7
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	3308      	adds	r3, #8
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002cb2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002cb6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbc:	6839      	ldr	r1, [r7, #0]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002cc4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	f04f 0400 	mov.w	r4, #0
 8002cd0:	0a0b      	lsrs	r3, r1, #8
 8002cd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cd6:	0a14      	lsrs	r4, r2, #8
 8002cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cda:	3201      	adds	r2, #1
 8002cdc:	6839      	ldr	r1, [r7, #0]
 8002cde:	440a      	add	r2, r1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002ce4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f04f 0400 	mov.w	r4, #0
 8002cf0:	0c0b      	lsrs	r3, r1, #16
 8002cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cf6:	0c14      	lsrs	r4, r2, #16
 8002cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfa:	3202      	adds	r2, #2
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	440a      	add	r2, r1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002d04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	f04f 0400 	mov.w	r4, #0
 8002d10:	0e0b      	lsrs	r3, r1, #24
 8002d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d16:	0e14      	lsrs	r4, r2, #24
 8002d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1a:	3203      	adds	r2, #3
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	440a      	add	r2, r1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	0013      	movs	r3, r2
 8002d32:	2400      	movs	r4, #0
 8002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d36:	3204      	adds	r2, #4
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	440a      	add	r2, r1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002d40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	0a13      	lsrs	r3, r2, #8
 8002d4e:	2400      	movs	r4, #0
 8002d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d52:	3205      	adds	r2, #5
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	440a      	add	r2, r1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	0c13      	lsrs	r3, r2, #16
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6e:	3206      	adds	r2, #6
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	440a      	add	r2, r1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002d78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	f04f 0400 	mov.w	r4, #0
 8002d84:	0e13      	lsrs	r3, r2, #24
 8002d86:	2400      	movs	r4, #0
 8002d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8a:	3207      	adds	r2, #7
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	440a      	add	r2, r1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	3308      	adds	r3, #8
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002da0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002da4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	440a      	add	r2, r1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002db2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	0a0b      	lsrs	r3, r1, #8
 8002dc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dc4:	0a14      	lsrs	r4, r2, #8
 8002dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc8:	3201      	adds	r2, #1
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	440a      	add	r2, r1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002dd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	f04f 0400 	mov.w	r4, #0
 8002dde:	0c0b      	lsrs	r3, r1, #16
 8002de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002de4:	0c14      	lsrs	r4, r2, #16
 8002de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de8:	3202      	adds	r2, #2
 8002dea:	6839      	ldr	r1, [r7, #0]
 8002dec:	440a      	add	r2, r1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002df2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	0e0b      	lsrs	r3, r1, #24
 8002e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e04:	0e14      	lsrs	r4, r2, #24
 8002e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e08:	3203      	adds	r2, #3
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002e12:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	f04f 0400 	mov.w	r4, #0
 8002e1e:	0013      	movs	r3, r2
 8002e20:	2400      	movs	r4, #0
 8002e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e24:	3204      	adds	r2, #4
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	440a      	add	r2, r1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	0a13      	lsrs	r3, r2, #8
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e40:	3205      	adds	r2, #5
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	440a      	add	r2, r1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002e4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	f04f 0400 	mov.w	r4, #0
 8002e56:	0c13      	lsrs	r3, r2, #16
 8002e58:	2400      	movs	r4, #0
 8002e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5c:	3206      	adds	r2, #6
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	440a      	add	r2, r1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002e66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	0e13      	lsrs	r3, r2, #24
 8002e74:	2400      	movs	r4, #0
 8002e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e78:	3207      	adds	r2, #7
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	3308      	adds	r3, #8
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002e8e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002e92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	440a      	add	r2, r1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	f04f 0400 	mov.w	r4, #0
 8002eac:	0a0b      	lsrs	r3, r1, #8
 8002eae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002eb2:	0a14      	lsrs	r4, r2, #8
 8002eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb6:	3201      	adds	r2, #1
 8002eb8:	6839      	ldr	r1, [r7, #0]
 8002eba:	440a      	add	r2, r1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002ec0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	0c0b      	lsrs	r3, r1, #16
 8002ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ed2:	0c14      	lsrs	r4, r2, #16
 8002ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed6:	3202      	adds	r2, #2
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	440a      	add	r2, r1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8002ee0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f04f 0400 	mov.w	r4, #0
 8002eec:	0e0b      	lsrs	r3, r1, #24
 8002eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ef2:	0e14      	lsrs	r4, r2, #24
 8002ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef6:	3203      	adds	r2, #3
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	440a      	add	r2, r1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002f00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	2400      	movs	r4, #0
 8002f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f12:	3204      	adds	r2, #4
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	440a      	add	r2, r1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002f1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	f04f 0400 	mov.w	r4, #0
 8002f28:	0a13      	lsrs	r3, r2, #8
 8002f2a:	2400      	movs	r4, #0
 8002f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2e:	3205      	adds	r2, #5
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	440a      	add	r2, r1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002f38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f04f 0400 	mov.w	r4, #0
 8002f44:	0c13      	lsrs	r3, r2, #16
 8002f46:	2400      	movs	r4, #0
 8002f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4a:	3206      	adds	r2, #6
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	440a      	add	r2, r1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002f54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	0e13      	lsrs	r3, r2, #24
 8002f62:	2400      	movs	r4, #0
 8002f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f66:	3207      	adds	r2, #7
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	440a      	add	r2, r1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	3308      	adds	r3, #8
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3730      	adds	r7, #48	; 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc90      	pop	{r4, r7}
 8002f80:	4770      	bx	lr

08002f82 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f82:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f86:	b092      	sub	sp, #72	; 0x48
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	61f8      	str	r0, [r7, #28]
 8002f8c:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	f04f 0400 	mov.w	r4, #0
 8002f9a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa4:	69b8      	ldr	r0, [r7, #24]
 8002fa6:	4403      	add	r3, r0
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b2dd      	uxtb	r5, r3
 8002fac:	f04f 0600 	mov.w	r6, #0
 8002fb0:	ea45 0301 	orr.w	r3, r5, r1
 8002fb4:	ea46 0402 	orr.w	r4, r6, r2
 8002fb8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fbc:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2d9      	uxtb	r1, r3
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f04f 0400 	mov.w	r4, #0
 8002fd8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002fdc:	0213      	lsls	r3, r2, #8
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	020b      	lsls	r3, r1, #8
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ff0:	ea43 0305 	orr.w	r3, r3, r5
 8002ff4:	ea44 0406 	orr.w	r4, r4, r6
 8002ff8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ffc:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8003000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003002:	3302      	adds	r3, #2
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b2d9      	uxtb	r1, r3
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	f04f 0400 	mov.w	r4, #0
 8003018:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800301c:	0413      	lsls	r3, r2, #16
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	040b      	lsls	r3, r1, #16
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003030:	ea43 0305 	orr.w	r3, r3, r5
 8003034:	ea44 0406 	orr.w	r4, r4, r6
 8003038:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800303c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	3303      	adds	r3, #3
 8003044:	69b8      	ldr	r0, [r7, #24]
 8003046:	4403      	add	r3, r0
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f04f 0400 	mov.w	r4, #0
 8003050:	0a18      	lsrs	r0, r3, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800305c:	ea43 0301 	orr.w	r3, r3, r1
 8003060:	ea44 0402 	orr.w	r4, r4, r2
 8003064:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003068:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	3304      	adds	r3, #4
 8003070:	69b8      	ldr	r0, [r7, #24]
 8003072:	4403      	add	r3, r0
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2dd      	uxtb	r5, r3
 8003078:	f04f 0600 	mov.w	r6, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003088:	002b      	movs	r3, r5
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003094:	ea43 0301 	orr.w	r3, r3, r1
 8003098:	ea44 0402 	orr.w	r4, r4, r2
 800309c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80030a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80030a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a6:	3305      	adds	r3, #5
 80030a8:	69b8      	ldr	r0, [r7, #24]
 80030aa:	4403      	add	r3, r0
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b2dd      	uxtb	r5, r3
 80030b0:	f04f 0600 	mov.w	r6, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80030c0:	022b      	lsls	r3, r5, #8
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030cc:	ea43 0301 	orr.w	r3, r3, r1
 80030d0:	ea44 0402 	orr.w	r4, r4, r2
 80030d4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	3306      	adds	r3, #6
 80030e0:	69b8      	ldr	r0, [r7, #24]
 80030e2:	4403      	add	r3, r0
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2dd      	uxtb	r5, r3
 80030e8:	f04f 0600 	mov.w	r6, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f04f 0400 	mov.w	r4, #0
 80030f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80030f8:	042b      	lsls	r3, r5, #16
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003104:	ea43 0301 	orr.w	r3, r3, r1
 8003108:	ea44 0402 	orr.w	r4, r4, r2
 800310c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	3307      	adds	r3, #7
 8003118:	69b8      	ldr	r0, [r7, #24]
 800311a:	4403      	add	r3, r0
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2dd      	uxtb	r5, r3
 8003120:	f04f 0600 	mov.w	r6, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003130:	062b      	lsls	r3, r5, #24
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800313c:	ea43 0301 	orr.w	r3, r3, r1
 8003140:	ea44 0402 	orr.w	r4, r4, r2
 8003144:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8003148:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8003152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003154:	3308      	adds	r3, #8
 8003156:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	f04f 0400 	mov.w	r4, #0
 8003160:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003164:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316a:	69b8      	ldr	r0, [r7, #24]
 800316c:	4403      	add	r3, r0
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2dd      	uxtb	r5, r3
 8003172:	f04f 0600 	mov.w	r6, #0
 8003176:	ea45 0301 	orr.w	r3, r5, r1
 800317a:	ea46 0402 	orr.w	r4, r6, r2
 800317e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003182:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8003186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003188:	3301      	adds	r3, #1
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2d9      	uxtb	r1, r3
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80031a2:	0213      	lsls	r3, r2, #8
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	020b      	lsls	r3, r1, #8
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031b6:	ea43 0305 	orr.w	r3, r3, r5
 80031ba:	ea44 0406 	orr.w	r4, r4, r6
 80031be:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031c2:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80031c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c8:	3302      	adds	r3, #2
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	f04f 0400 	mov.w	r4, #0
 80031de:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80031e2:	0413      	lsls	r3, r2, #16
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	040b      	lsls	r3, r1, #16
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031f6:	ea43 0305 	orr.w	r3, r3, r5
 80031fa:	ea44 0406 	orr.w	r4, r4, r6
 80031fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003202:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003208:	3303      	adds	r3, #3
 800320a:	69b8      	ldr	r0, [r7, #24]
 800320c:	4403      	add	r3, r0
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f04f 0400 	mov.w	r4, #0
 8003216:	0a18      	lsrs	r0, r3, #8
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003222:	ea43 0301 	orr.w	r3, r3, r1
 8003226:	ea44 0402 	orr.w	r4, r4, r2
 800322a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800322e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003234:	3304      	adds	r3, #4
 8003236:	69b8      	ldr	r0, [r7, #24]
 8003238:	4403      	add	r3, r0
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2dd      	uxtb	r5, r3
 800323e:	f04f 0600 	mov.w	r6, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800324e:	002b      	movs	r3, r5
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800325a:	ea43 0301 	orr.w	r3, r3, r1
 800325e:	ea44 0402 	orr.w	r4, r4, r2
 8003262:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003266:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800326a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326c:	3305      	adds	r3, #5
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	4403      	add	r3, r0
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2dd      	uxtb	r5, r3
 8003276:	f04f 0600 	mov.w	r6, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003286:	022b      	lsls	r3, r5, #8
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003292:	ea43 0301 	orr.w	r3, r3, r1
 8003296:	ea44 0402 	orr.w	r4, r4, r2
 800329a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800329e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80032a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a4:	3306      	adds	r3, #6
 80032a6:	69b8      	ldr	r0, [r7, #24]
 80032a8:	4403      	add	r3, r0
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2dd      	uxtb	r5, r3
 80032ae:	f04f 0600 	mov.w	r6, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	f04f 0400 	mov.w	r4, #0
 80032ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80032be:	042b      	lsls	r3, r5, #16
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032ca:	ea43 0301 	orr.w	r3, r3, r1
 80032ce:	ea44 0402 	orr.w	r4, r4, r2
 80032d2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80032da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032dc:	3307      	adds	r3, #7
 80032de:	69b8      	ldr	r0, [r7, #24]
 80032e0:	4403      	add	r3, r0
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b2dd      	uxtb	r5, r3
 80032e6:	f04f 0600 	mov.w	r6, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80032f6:	062b      	lsls	r3, r5, #24
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003302:	ea43 0301 	orr.w	r3, r3, r1
 8003306:	ea44 0402 	orr.w	r4, r4, r2
 800330a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 800330e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	3308      	adds	r3, #8
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800332a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003330:	69b8      	ldr	r0, [r7, #24]
 8003332:	4403      	add	r3, r0
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b2dd      	uxtb	r5, r3
 8003338:	f04f 0600 	mov.w	r6, #0
 800333c:	ea45 0301 	orr.w	r3, r5, r1
 8003340:	ea46 0402 	orr.w	r4, r6, r2
 8003344:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003348:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	3301      	adds	r3, #1
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b2d9      	uxtb	r1, r3
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003368:	0213      	lsls	r3, r2, #8
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	020b      	lsls	r3, r1, #8
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800337c:	ea43 0305 	orr.w	r3, r3, r5
 8003380:	ea44 0406 	orr.w	r4, r4, r6
 8003384:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003388:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800338c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338e:	3302      	adds	r3, #2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2d9      	uxtb	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80033a8:	0413      	lsls	r3, r2, #16
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	040b      	lsls	r3, r1, #16
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033bc:	ea43 0305 	orr.w	r3, r3, r5
 80033c0:	ea44 0406 	orr.w	r4, r4, r6
 80033c4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	3303      	adds	r3, #3
 80033d0:	69b8      	ldr	r0, [r7, #24]
 80033d2:	4403      	add	r3, r0
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80033e0:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80033e4:	ea41 030a 	orr.w	r3, r1, sl
 80033e8:	ea42 040b 	orr.w	r4, r2, fp
 80033ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80033f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	3304      	adds	r3, #4
 80033f8:	69b8      	ldr	r0, [r7, #24]
 80033fa:	4403      	add	r3, r0
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2dd      	uxtb	r5, r3
 8003400:	f04f 0600 	mov.w	r6, #0
 8003404:	f04f 0a00 	mov.w	sl, #0
 8003408:	f04f 0b00 	mov.w	fp, #0
 800340c:	46ab      	mov	fp, r5
 800340e:	f04f 0a00 	mov.w	sl, #0
 8003412:	ea4a 0301 	orr.w	r3, sl, r1
 8003416:	ea4b 0402 	orr.w	r4, fp, r2
 800341a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800341e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003424:	3305      	adds	r3, #5
 8003426:	69b8      	ldr	r0, [r7, #24]
 8003428:	4403      	add	r3, r0
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b2dd      	uxtb	r5, r3
 800342e:	f04f 0600 	mov.w	r6, #0
 8003432:	f04f 0a00 	mov.w	sl, #0
 8003436:	f04f 0b00 	mov.w	fp, #0
 800343a:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 800343e:	f04f 0a00 	mov.w	sl, #0
 8003442:	ea4a 0301 	orr.w	r3, sl, r1
 8003446:	ea4b 0402 	orr.w	r4, fp, r2
 800344a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800344e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	3306      	adds	r3, #6
 8003456:	69b8      	ldr	r0, [r7, #24]
 8003458:	4403      	add	r3, r0
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b2dd      	uxtb	r5, r3
 800345e:	f04f 0600 	mov.w	r6, #0
 8003462:	f04f 0a00 	mov.w	sl, #0
 8003466:	f04f 0b00 	mov.w	fp, #0
 800346a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 800346e:	f04f 0a00 	mov.w	sl, #0
 8003472:	ea4a 0301 	orr.w	r3, sl, r1
 8003476:	ea4b 0402 	orr.w	r4, fp, r2
 800347a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800347e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003484:	3307      	adds	r3, #7
 8003486:	69b8      	ldr	r0, [r7, #24]
 8003488:	4403      	add	r3, r0
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2dd      	uxtb	r5, r3
 800348e:	f04f 0600 	mov.w	r6, #0
 8003492:	f04f 0a00 	mov.w	sl, #0
 8003496:	f04f 0b00 	mov.w	fp, #0
 800349a:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 800349e:	f04f 0a00 	mov.w	sl, #0
 80034a2:	ea4a 0301 	orr.w	r3, sl, r1
 80034a6:	ea4b 0402 	orr.w	r4, fp, r2
 80034aa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 80034ae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 80034b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ba:	3308      	adds	r3, #8
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	f04f 0400 	mov.w	r4, #0
 80034c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80034ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d0:	69b8      	ldr	r0, [r7, #24]
 80034d2:	4403      	add	r3, r0
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2dd      	uxtb	r5, r3
 80034d8:	f04f 0600 	mov.w	r6, #0
 80034dc:	ea45 0301 	orr.w	r3, r5, r1
 80034e0:	ea46 0402 	orr.w	r4, r6, r2
 80034e4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034e8:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80034ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ee:	3301      	adds	r3, #1
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b2d9      	uxtb	r1, r3
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0a00 	mov.w	sl, #0
 8003500:	f04f 0b00 	mov.w	fp, #0
 8003504:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8003508:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 800350c:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8003510:	ea4a 0305 	orr.w	r3, sl, r5
 8003514:	ea4b 0406 	orr.w	r4, fp, r6
 8003518:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800351c:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8003520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003522:	3302      	adds	r3, #2
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b2d9      	uxtb	r1, r3
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0a00 	mov.w	sl, #0
 8003534:	f04f 0b00 	mov.w	fp, #0
 8003538:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 800353c:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8003540:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8003544:	ea4a 0305 	orr.w	r3, sl, r5
 8003548:	ea4b 0406 	orr.w	r4, fp, r6
 800354c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003550:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	3303      	adds	r3, #3
 8003558:	69b8      	ldr	r0, [r7, #24]
 800355a:	4403      	add	r3, r0
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f04f 0400 	mov.w	r4, #0
 8003564:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003568:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800356c:	ea41 0308 	orr.w	r3, r1, r8
 8003570:	ea42 0409 	orr.w	r4, r2, r9
 8003574:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003578:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	3304      	adds	r3, #4
 8003580:	69b8      	ldr	r0, [r7, #24]
 8003582:	4403      	add	r3, r0
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b2dd      	uxtb	r5, r3
 8003588:	f04f 0600 	mov.w	r6, #0
 800358c:	f04f 0800 	mov.w	r8, #0
 8003590:	f04f 0900 	mov.w	r9, #0
 8003594:	46a9      	mov	r9, r5
 8003596:	f04f 0800 	mov.w	r8, #0
 800359a:	ea48 0301 	orr.w	r3, r8, r1
 800359e:	ea49 0402 	orr.w	r4, r9, r2
 80035a2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80035a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ac:	3305      	adds	r3, #5
 80035ae:	69b8      	ldr	r0, [r7, #24]
 80035b0:	4403      	add	r3, r0
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2dd      	uxtb	r5, r3
 80035b6:	f04f 0600 	mov.w	r6, #0
 80035ba:	f04f 0800 	mov.w	r8, #0
 80035be:	f04f 0900 	mov.w	r9, #0
 80035c2:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80035c6:	f04f 0800 	mov.w	r8, #0
 80035ca:	ea48 0301 	orr.w	r3, r8, r1
 80035ce:	ea49 0402 	orr.w	r4, r9, r2
 80035d2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80035d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035dc:	3306      	adds	r3, #6
 80035de:	69b8      	ldr	r0, [r7, #24]
 80035e0:	4403      	add	r3, r0
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2dd      	uxtb	r5, r3
 80035e6:	f04f 0600 	mov.w	r6, #0
 80035ea:	f04f 0800 	mov.w	r8, #0
 80035ee:	f04f 0900 	mov.w	r9, #0
 80035f2:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80035f6:	f04f 0800 	mov.w	r8, #0
 80035fa:	ea48 0301 	orr.w	r3, r8, r1
 80035fe:	ea49 0402 	orr.w	r4, r9, r2
 8003602:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003606:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	3307      	adds	r3, #7
 800360e:	69b8      	ldr	r0, [r7, #24]
 8003610:	4403      	add	r3, r0
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2dd      	uxtb	r5, r3
 8003616:	f04f 0600 	mov.w	r6, #0
 800361a:	f04f 0800 	mov.w	r8, #0
 800361e:	f04f 0900 	mov.w	r9, #0
 8003622:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8003626:	f04f 0800 	mov.w	r8, #0
 800362a:	ea48 0301 	orr.w	r3, r8, r1
 800362e:	ea49 0402 	orr.w	r4, r9, r2
 8003632:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 8003636:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	3308      	adds	r3, #8
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8003646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3748      	adds	r7, #72	; 0x48
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003652:	4770      	bx	lr

08003654 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	08008bd8 	.word	0x08008bd8

08003670 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	08008bf4 	.word	0x08008bf4

0800368c <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fcea 	bl	8001070 <_ZN3ros3MsgC1Ev>
 800369c:	4a24      	ldr	r2, [pc, #144]	; (8003730 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fc78 	bl	8001f9c <_ZN8std_msgs6HeaderC1Ev>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3318      	adds	r3, #24
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fa4f 	bl	8002b54 <_ZN13geometry_msgs10QuaternionC1Ev>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80036bc:	2308      	movs	r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	db08      	blt.n	80036d4 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	e9c2 0100 	strd	r0, r1, [r2]
 80036ce:	3208      	adds	r2, #8
 80036d0:	3b01      	subs	r3, #1
 80036d2:	e7f4      	b.n	80036be <_ZN11sensor_msgs3ImuC1Ev+0x32>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3388      	adds	r3, #136	; 0x88
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fdf3 	bl	80022c4 <_ZN13geometry_msgs7Vector3C1Ev>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80036e4:	2308      	movs	r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db08      	blt.n	80036fc <_ZN11sensor_msgs3ImuC1Ev+0x70>
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	e9c2 0100 	strd	r0, r1, [r2]
 80036f6:	3208      	adds	r2, #8
 80036f8:	3b01      	subs	r3, #1
 80036fa:	e7f4      	b.n	80036e6 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	33f0      	adds	r3, #240	; 0xf0
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fddf 	bl	80022c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f503 7288 	add.w	r2, r3, #272	; 0x110
 800370c:	2308      	movs	r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	db08      	blt.n	8003724 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	e9c2 0100 	strd	r0, r1, [r2]
 800371e:	3208      	adds	r2, #8
 8003720:	3b01      	subs	r3, #1
 8003722:	e7f4      	b.n	800370e <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	08008cb0 	.word	0x08008cb0

08003734 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b08d      	sub	sp, #52	; 0x34
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1d18      	adds	r0, r3, #4
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f7fe fc45 	bl	8001fdc <_ZNK8std_msgs6Header9serializeEPh>
 8003752:	4602      	mov	r2, r0
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	4413      	add	r3, r2
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 0018 	add.w	r0, r3, #24
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f7ff fa22 	bl	8002bb0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800376c:	4602      	mov	r2, r0
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	4413      	add	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003774:	2300      	movs	r3, #0
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	2b08      	cmp	r3, #8
 800377c:	d87e      	bhi.n	800387c <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	3308      	adds	r3, #8
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	e9d3 3400 	ldrd	r3, r4, [r3]
 800378c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8003790:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	440a      	add	r2, r1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800379e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	0a0b      	lsrs	r3, r1, #8
 80037ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80037b0:	0a14      	lsrs	r4, r2, #8
 80037b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b4:	3201      	adds	r2, #1
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	440a      	add	r2, r1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 80037be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	0c0b      	lsrs	r3, r1, #16
 80037cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037d0:	0c14      	lsrs	r4, r2, #16
 80037d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d4:	3202      	adds	r2, #2
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	440a      	add	r2, r1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 80037de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	0e0b      	lsrs	r3, r1, #24
 80037ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037f0:	0e14      	lsrs	r4, r2, #24
 80037f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f4:	3203      	adds	r2, #3
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	440a      	add	r2, r1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 80037fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f04f 0400 	mov.w	r4, #0
 800380a:	0013      	movs	r3, r2
 800380c:	2400      	movs	r4, #0
 800380e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003810:	3204      	adds	r2, #4
 8003812:	6839      	ldr	r1, [r7, #0]
 8003814:	440a      	add	r2, r1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 800381a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	f04f 0400 	mov.w	r4, #0
 8003826:	0a13      	lsrs	r3, r2, #8
 8003828:	2400      	movs	r4, #0
 800382a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382c:	3205      	adds	r2, #5
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	440a      	add	r2, r1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8003836:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	0c13      	lsrs	r3, r2, #16
 8003844:	2400      	movs	r4, #0
 8003846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003848:	3206      	adds	r2, #6
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	440a      	add	r2, r1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8003852:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	0e13      	lsrs	r3, r2, #24
 8003860:	2400      	movs	r4, #0
 8003862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003864:	3207      	adds	r2, #7
 8003866:	6839      	ldr	r1, [r7, #0]
 8003868:	440a      	add	r2, r1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->orientation_covariance[i]);
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	3308      	adds	r3, #8
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	3301      	adds	r3, #1
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
 800387a:	e77d      	b.n	8003778 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	4413      	add	r3, r2
 8003888:	4619      	mov	r1, r3
 800388a:	f7fe fd43 	bl	8002314 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800388e:	4602      	mov	r2, r0
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	4413      	add	r3, r2
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	2b08      	cmp	r3, #8
 800389e:	d87e      	bhi.n	800399e <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	3315      	adds	r3, #21
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 80038b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	440a      	add	r2, r1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 80038c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	0a0b      	lsrs	r3, r1, #8
 80038ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038d2:	0a14      	lsrs	r4, r2, #8
 80038d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d6:	3201      	adds	r2, #1
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	440a      	add	r2, r1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 80038e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	0c0b      	lsrs	r3, r1, #16
 80038ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038f2:	0c14      	lsrs	r4, r2, #16
 80038f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f6:	3202      	adds	r2, #2
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	440a      	add	r2, r1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8003900:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f04f 0400 	mov.w	r4, #0
 800390c:	0e0b      	lsrs	r3, r1, #24
 800390e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003912:	0e14      	lsrs	r4, r2, #24
 8003914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003916:	3203      	adds	r2, #3
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	440a      	add	r2, r1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8003920:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	f04f 0400 	mov.w	r4, #0
 800392c:	0013      	movs	r3, r2
 800392e:	2400      	movs	r4, #0
 8003930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003932:	3204      	adds	r2, #4
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	440a      	add	r2, r1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 800393c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	f04f 0400 	mov.w	r4, #0
 8003948:	0a13      	lsrs	r3, r2, #8
 800394a:	2400      	movs	r4, #0
 800394c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394e:	3205      	adds	r2, #5
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	440a      	add	r2, r1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8003958:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	f04f 0400 	mov.w	r4, #0
 8003964:	0c13      	lsrs	r3, r2, #16
 8003966:	2400      	movs	r4, #0
 8003968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396a:	3206      	adds	r2, #6
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	440a      	add	r2, r1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8003974:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	f04f 0400 	mov.w	r4, #0
 8003980:	0e13      	lsrs	r3, r2, #24
 8003982:	2400      	movs	r4, #0
 8003984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003986:	3207      	adds	r2, #7
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	440a      	add	r2, r1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	3308      	adds	r3, #8
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	3301      	adds	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
 800399c:	e77d      	b.n	800389a <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	4413      	add	r3, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fe fcb2 	bl	8002314 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	4413      	add	r3, r2
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80039b8:	2300      	movs	r3, #0
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d87e      	bhi.n	8003ac0 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	3322      	adds	r3, #34	; 0x22
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039d0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 80039d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	440a      	add	r2, r1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 80039e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	0a0b      	lsrs	r3, r1, #8
 80039f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80039f4:	0a14      	lsrs	r4, r2, #8
 80039f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f8:	3201      	adds	r2, #1
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	440a      	add	r2, r1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8003a02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	f04f 0400 	mov.w	r4, #0
 8003a0e:	0c0b      	lsrs	r3, r1, #16
 8003a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a14:	0c14      	lsrs	r4, r2, #16
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	3202      	adds	r2, #2
 8003a1a:	6839      	ldr	r1, [r7, #0]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8003a22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	0e0b      	lsrs	r3, r1, #24
 8003a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a34:	0e14      	lsrs	r4, r2, #24
 8003a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a38:	3203      	adds	r2, #3
 8003a3a:	6839      	ldr	r1, [r7, #0]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8003a42:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f04f 0400 	mov.w	r4, #0
 8003a4e:	0013      	movs	r3, r2
 8003a50:	2400      	movs	r4, #0
 8003a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a54:	3204      	adds	r2, #4
 8003a56:	6839      	ldr	r1, [r7, #0]
 8003a58:	440a      	add	r2, r1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8003a5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	0a13      	lsrs	r3, r2, #8
 8003a6c:	2400      	movs	r4, #0
 8003a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a70:	3205      	adds	r2, #5
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	440a      	add	r2, r1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8003a7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	f04f 0400 	mov.w	r4, #0
 8003a86:	0c13      	lsrs	r3, r2, #16
 8003a88:	2400      	movs	r4, #0
 8003a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8c:	3206      	adds	r2, #6
 8003a8e:	6839      	ldr	r1, [r7, #0]
 8003a90:	440a      	add	r2, r1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8003a96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	f04f 0400 	mov.w	r4, #0
 8003aa2:	0e13      	lsrs	r3, r2, #24
 8003aa4:	2400      	movs	r4, #0
 8003aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa8:	3207      	adds	r2, #7
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	440a      	add	r2, r1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	3301      	adds	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	e77d      	b.n	80039bc <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3734      	adds	r7, #52	; 0x34
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd90      	pop	{r4, r7, pc}

08003aca <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003aca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ace:	b091      	sub	sp, #68	; 0x44
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6178      	str	r0, [r7, #20]
 8003ad4:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->header.deserialize(inbuffer + offset);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1d18      	adds	r0, r3, #4
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fe fb11 	bl	800210c <_ZN8std_msgs6Header11deserializeEPh>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	4413      	add	r3, r2
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->orientation.deserialize(inbuffer + offset);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f103 0018 	add.w	r0, r3, #24
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f7ff fa3f 	bl	8002f82 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	4413      	add	r3, r2
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	f200 80dd 	bhi.w	8003cd2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x208>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b24:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	6938      	ldr	r0, [r7, #16]
 8003b2c:	4403      	add	r3, r0
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2dd      	uxtb	r5, r3
 8003b32:	f04f 0600 	mov.w	r6, #0
 8003b36:	ea45 0301 	orr.w	r3, r5, r1
 8003b3a:	ea46 0402 	orr.w	r4, r6, r2
 8003b3e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b42:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	3301      	adds	r3, #1
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2d9      	uxtb	r1, r3
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	f04f 0400 	mov.w	r4, #0
 8003b5e:	0214      	lsls	r4, r2, #8
 8003b60:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b64:	020b      	lsls	r3, r1, #8
 8003b66:	ea45 0503 	orr.w	r5, r5, r3
 8003b6a:	ea46 0604 	orr.w	r6, r6, r4
 8003b6e:	462b      	mov	r3, r5
 8003b70:	4634      	mov	r4, r6
 8003b72:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b76:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b2d9      	uxtb	r1, r3
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f04f 0400 	mov.w	r4, #0
 8003b92:	0414      	lsls	r4, r2, #16
 8003b94:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003b98:	040b      	lsls	r3, r1, #16
 8003b9a:	ea45 0503 	orr.w	r5, r5, r3
 8003b9e:	ea46 0604 	orr.w	r6, r6, r4
 8003ba2:	462b      	mov	r3, r5
 8003ba4:	4634      	mov	r4, r6
 8003ba6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003baa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb0:	3303      	adds	r3, #3
 8003bb2:	6938      	ldr	r0, [r7, #16]
 8003bb4:	4403      	add	r3, r0
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8003bc2:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8003bc6:	ea41 030a 	orr.w	r3, r1, sl
 8003bca:	ea42 040b 	orr.w	r4, r2, fp
 8003bce:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bd2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd8:	3304      	adds	r3, #4
 8003bda:	6938      	ldr	r0, [r7, #16]
 8003bdc:	4403      	add	r3, r0
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461c      	mov	r4, r3
 8003be2:	b2e4      	uxtb	r4, r4
 8003be4:	f04f 0500 	mov.w	r5, #0
 8003be8:	f04f 0800 	mov.w	r8, #0
 8003bec:	f04f 0900 	mov.w	r9, #0
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	001b      	movs	r3, r3
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4698      	mov	r8, r3
 8003bfa:	4643      	mov	r3, r8
 8003bfc:	464c      	mov	r4, r9
 8003bfe:	ea43 0301 	orr.w	r3, r3, r1
 8003c02:	ea44 0402 	orr.w	r4, r4, r2
 8003c06:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	3305      	adds	r3, #5
 8003c12:	6938      	ldr	r0, [r7, #16]
 8003c14:	4403      	add	r3, r0
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461c      	mov	r4, r3
 8003c1a:	b2e4      	uxtb	r4, r4
 8003c1c:	f04f 0500 	mov.w	r5, #0
 8003c20:	f04f 0800 	mov.w	r8, #0
 8003c24:	f04f 0900 	mov.w	r9, #0
 8003c28:	4623      	mov	r3, r4
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	4699      	mov	r9, r3
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4698      	mov	r8, r3
 8003c32:	4643      	mov	r3, r8
 8003c34:	464c      	mov	r4, r9
 8003c36:	ea43 0301 	orr.w	r3, r3, r1
 8003c3a:	ea44 0402 	orr.w	r4, r4, r2
 8003c3e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c42:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	3306      	adds	r3, #6
 8003c4a:	6938      	ldr	r0, [r7, #16]
 8003c4c:	4403      	add	r3, r0
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461c      	mov	r4, r3
 8003c52:	b2e4      	uxtb	r4, r4
 8003c54:	f04f 0500 	mov.w	r5, #0
 8003c58:	f04f 0800 	mov.w	r8, #0
 8003c5c:	f04f 0900 	mov.w	r9, #0
 8003c60:	4623      	mov	r3, r4
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	4699      	mov	r9, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	4698      	mov	r8, r3
 8003c6a:	4643      	mov	r3, r8
 8003c6c:	464c      	mov	r4, r9
 8003c6e:	ea43 0301 	orr.w	r3, r3, r1
 8003c72:	ea44 0402 	orr.w	r4, r4, r2
 8003c76:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c80:	3307      	adds	r3, #7
 8003c82:	6938      	ldr	r0, [r7, #16]
 8003c84:	4403      	add	r3, r0
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	461c      	mov	r4, r3
 8003c8a:	b2e4      	uxtb	r4, r4
 8003c8c:	f04f 0500 	mov.w	r5, #0
 8003c90:	f04f 0800 	mov.w	r8, #0
 8003c94:	f04f 0900 	mov.w	r9, #0
 8003c98:	4623      	mov	r3, r4
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	4699      	mov	r9, r3
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	4698      	mov	r8, r3
 8003ca2:	4643      	mov	r3, r8
 8003ca4:	464c      	mov	r4, r9
 8003ca6:	ea43 0301 	orr.w	r3, r3, r1
 8003caa:	ea44 0402 	orr.w	r4, r4, r2
 8003cae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8003cb2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cba:	3208      	adds	r2, #8
 8003cbc:	00d2      	lsls	r2, r2, #3
 8003cbe:	440a      	add	r2, r1
 8003cc0:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->orientation_covariance[i]);
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	3301      	adds	r3, #1
 8003cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd0:	e71e      	b.n	8003b10 <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7fe fc8a 	bl	80025f8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	4413      	add	r3, r2
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	f200 80ca 	bhi.w	8003e8c <_ZN11sensor_msgs3Imu11deserializeEPh+0x3c2>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	6938      	ldr	r0, [r7, #16]
 8003d0c:	4403      	add	r3, r0
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b2dd      	uxtb	r5, r3
 8003d12:	f04f 0600 	mov.w	r6, #0
 8003d16:	ea45 0301 	orr.w	r3, r5, r1
 8003d1a:	ea46 0402 	orr.w	r4, r6, r2
 8003d1e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d22:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	3301      	adds	r3, #1
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b2d9      	uxtb	r1, r3
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0500 	mov.w	r5, #0
 8003d3a:	f04f 0600 	mov.w	r6, #0
 8003d3e:	0216      	lsls	r6, r2, #8
 8003d40:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8003d44:	020d      	lsls	r5, r1, #8
 8003d46:	ea45 030a 	orr.w	r3, r5, sl
 8003d4a:	ea46 040b 	orr.w	r4, r6, fp
 8003d4e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d52:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	3302      	adds	r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2d9      	uxtb	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0500 	mov.w	r5, #0
 8003d6a:	f04f 0600 	mov.w	r6, #0
 8003d6e:	0416      	lsls	r6, r2, #16
 8003d70:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 8003d74:	040d      	lsls	r5, r1, #16
 8003d76:	ea45 030a 	orr.w	r3, r5, sl
 8003d7a:	ea46 040b 	orr.w	r4, r6, fp
 8003d7e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d82:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d88:	3303      	adds	r3, #3
 8003d8a:	6938      	ldr	r0, [r7, #16]
 8003d8c:	4403      	add	r3, r0
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	0a18      	lsrs	r0, r3, #8
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003da2:	ea43 0301 	orr.w	r3, r3, r1
 8003da6:	ea44 0402 	orr.w	r4, r4, r2
 8003daa:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003dae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	3304      	adds	r3, #4
 8003db6:	6938      	ldr	r0, [r7, #16]
 8003db8:	4403      	add	r3, r0
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	fa5f fa83 	uxtb.w	sl, r3
 8003dc0:	f04f 0b00 	mov.w	fp, #0
 8003dc4:	f04f 0500 	mov.w	r5, #0
 8003dc8:	f04f 0600 	mov.w	r6, #0
 8003dcc:	4656      	mov	r6, sl
 8003dce:	2500      	movs	r5, #0
 8003dd0:	ea45 0301 	orr.w	r3, r5, r1
 8003dd4:	ea46 0402 	orr.w	r4, r6, r2
 8003dd8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ddc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de2:	3305      	adds	r3, #5
 8003de4:	6938      	ldr	r0, [r7, #16]
 8003de6:	4403      	add	r3, r0
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	fa5f fa83 	uxtb.w	sl, r3
 8003dee:	f04f 0b00 	mov.w	fp, #0
 8003df2:	f04f 0500 	mov.w	r5, #0
 8003df6:	f04f 0600 	mov.w	r6, #0
 8003dfa:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8003dfe:	2500      	movs	r5, #0
 8003e00:	ea45 0301 	orr.w	r3, r5, r1
 8003e04:	ea46 0402 	orr.w	r4, r6, r2
 8003e08:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	3306      	adds	r3, #6
 8003e14:	6938      	ldr	r0, [r7, #16]
 8003e16:	4403      	add	r3, r0
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	fa5f fa83 	uxtb.w	sl, r3
 8003e1e:	f04f 0b00 	mov.w	fp, #0
 8003e22:	f04f 0500 	mov.w	r5, #0
 8003e26:	f04f 0600 	mov.w	r6, #0
 8003e2a:	ea4f 460a 	mov.w	r6, sl, lsl #16
 8003e2e:	2500      	movs	r5, #0
 8003e30:	ea45 0301 	orr.w	r3, r5, r1
 8003e34:	ea46 0402 	orr.w	r4, r6, r2
 8003e38:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	3307      	adds	r3, #7
 8003e44:	6938      	ldr	r0, [r7, #16]
 8003e46:	4403      	add	r3, r0
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	fa5f fa83 	uxtb.w	sl, r3
 8003e4e:	f04f 0b00 	mov.w	fp, #0
 8003e52:	f04f 0500 	mov.w	r5, #0
 8003e56:	f04f 0600 	mov.w	r6, #0
 8003e5a:	ea4f 660a 	mov.w	r6, sl, lsl #24
 8003e5e:	2500      	movs	r5, #0
 8003e60:	ea45 0301 	orr.w	r3, r5, r1
 8003e64:	ea46 0402 	orr.w	r4, r6, r2
 8003e68:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8003e6c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e74:	3215      	adds	r2, #21
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	440a      	add	r2, r1
 8003e7a:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	3308      	adds	r3, #8
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	3301      	adds	r3, #1
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	e731      	b.n	8003cf0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x226>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7fe fbad 	bl	80025f8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea2:	4413      	add	r3, r2
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	f200 80ca 	bhi.w	8004046 <_ZN11sensor_msgs3Imu11deserializeEPh+0x57c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ebe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec4:	6938      	ldr	r0, [r7, #16]
 8003ec6:	4403      	add	r3, r0
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b2dd      	uxtb	r5, r3
 8003ecc:	f04f 0600 	mov.w	r6, #0
 8003ed0:	ea45 0301 	orr.w	r3, r5, r1
 8003ed4:	ea46 0402 	orr.w	r4, r6, r2
 8003ed8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003edc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b2d9      	uxtb	r1, r3
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0500 	mov.w	r5, #0
 8003ef4:	f04f 0600 	mov.w	r6, #0
 8003ef8:	0216      	lsls	r6, r2, #8
 8003efa:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8003efe:	020d      	lsls	r5, r1, #8
 8003f00:	ea45 0308 	orr.w	r3, r5, r8
 8003f04:	ea46 0409 	orr.w	r4, r6, r9
 8003f08:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f0c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	3302      	adds	r3, #2
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	b2d9      	uxtb	r1, r3
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0500 	mov.w	r5, #0
 8003f24:	f04f 0600 	mov.w	r6, #0
 8003f28:	0416      	lsls	r6, r2, #16
 8003f2a:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 8003f2e:	040d      	lsls	r5, r1, #16
 8003f30:	ea45 0308 	orr.w	r3, r5, r8
 8003f34:	ea46 0409 	orr.w	r4, r6, r9
 8003f38:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	3303      	adds	r3, #3
 8003f44:	6938      	ldr	r0, [r7, #16]
 8003f46:	4403      	add	r3, r0
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f04f 0400 	mov.w	r4, #0
 8003f50:	0a18      	lsrs	r0, r3, #8
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f5c:	ea43 0301 	orr.w	r3, r3, r1
 8003f60:	ea44 0402 	orr.w	r4, r4, r2
 8003f64:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6e:	3304      	adds	r3, #4
 8003f70:	6938      	ldr	r0, [r7, #16]
 8003f72:	4403      	add	r3, r0
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	fa5f f883 	uxtb.w	r8, r3
 8003f7a:	f04f 0900 	mov.w	r9, #0
 8003f7e:	f04f 0500 	mov.w	r5, #0
 8003f82:	f04f 0600 	mov.w	r6, #0
 8003f86:	4646      	mov	r6, r8
 8003f88:	2500      	movs	r5, #0
 8003f8a:	ea45 0301 	orr.w	r3, r5, r1
 8003f8e:	ea46 0402 	orr.w	r4, r6, r2
 8003f92:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	3305      	adds	r3, #5
 8003f9e:	6938      	ldr	r0, [r7, #16]
 8003fa0:	4403      	add	r3, r0
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	fa5f f883 	uxtb.w	r8, r3
 8003fa8:	f04f 0900 	mov.w	r9, #0
 8003fac:	f04f 0500 	mov.w	r5, #0
 8003fb0:	f04f 0600 	mov.w	r6, #0
 8003fb4:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8003fb8:	2500      	movs	r5, #0
 8003fba:	ea45 0301 	orr.w	r3, r5, r1
 8003fbe:	ea46 0402 	orr.w	r4, r6, r2
 8003fc2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fc6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fcc:	3306      	adds	r3, #6
 8003fce:	6938      	ldr	r0, [r7, #16]
 8003fd0:	4403      	add	r3, r0
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	fa5f f883 	uxtb.w	r8, r3
 8003fd8:	f04f 0900 	mov.w	r9, #0
 8003fdc:	f04f 0500 	mov.w	r5, #0
 8003fe0:	f04f 0600 	mov.w	r6, #0
 8003fe4:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8003fe8:	2500      	movs	r5, #0
 8003fea:	ea45 0301 	orr.w	r3, r5, r1
 8003fee:	ea46 0402 	orr.w	r4, r6, r2
 8003ff2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ff6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	3307      	adds	r3, #7
 8003ffe:	6938      	ldr	r0, [r7, #16]
 8004000:	4403      	add	r3, r0
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	fa5f f883 	uxtb.w	r8, r3
 8004008:	f04f 0900 	mov.w	r9, #0
 800400c:	f04f 0500 	mov.w	r5, #0
 8004010:	f04f 0600 	mov.w	r6, #0
 8004014:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8004018:	2500      	movs	r5, #0
 800401a:	ea45 0301 	orr.w	r3, r5, r1
 800401e:	ea46 0402 	orr.w	r4, r6, r2
 8004022:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004026:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800402a:	6979      	ldr	r1, [r7, #20]
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	3222      	adds	r2, #34	; 0x22
 8004030:	00d2      	lsls	r2, r2, #3
 8004032:	440a      	add	r2, r1
 8004034:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403a:	3308      	adds	r3, #8
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	3301      	adds	r3, #1
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
 8004044:	e731      	b.n	8003eaa <_ZN11sensor_msgs3Imu11deserializeEPh+0x3e0>
      }
     return offset;
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8004048:	4618      	mov	r0, r3
 800404a:	3744      	adds	r7, #68	; 0x44
 800404c:	46bd      	mov	sp, r7
 800404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004054 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	08008c18 	.word	0x08008c18

08004070 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	08008c28 	.word	0x08008c28

0800408c <HAL_UART_TxCpltCallback>:
/*
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8004094:	4805      	ldr	r0, [pc, #20]	; (80040ac <HAL_UART_TxCpltCallback+0x20>)
 8004096:	f000 fa37 	bl	8004508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800409a:	4603      	mov	r3, r0
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fecd 	bl	8001e3c <_ZN13STM32Hardware5flushEv>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200001f4 	.word	0x200001f4

080040b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80040b8:	4805      	ldr	r0, [pc, #20]	; (80040d0 <HAL_UART_RxCpltCallback+0x20>)
 80040ba:	f000 fa25 	bl	8004508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040be:	4603      	mov	r3, r0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd fe7c 	bl	8001dbe <_ZN13STM32Hardware10reset_rbufEv>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200001f4 	.word	0x200001f4

080040d4 <setup>:

//char base_link[] = "/base_link";
char odom[] = "/imu";

void setup()
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af04      	add	r7, sp, #16
  nh.initNode();
 80040da:	480c      	ldr	r0, [pc, #48]	; (800410c <setup+0x38>)
 80040dc:	f000 fa20 	bl	8004520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(pub_imu);
 80040e0:	490b      	ldr	r1, [pc, #44]	; (8004110 <setup+0x3c>)
 80040e2:	480a      	ldr	r0, [pc, #40]	; (800410c <setup+0x38>)
 80040e4:	f000 f94f 	bl	8004386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
uint8_t Settings = LSM303_ACC_XYZ_ENABLE | LSM303_ACC_100HZ;
 80040e8:	2357      	movs	r3, #87	; 0x57
 80040ea:	71fb      	strb	r3, [r7, #7]

	// Wpisanie konfiguracji do rejestru akcelerometru
HAL_I2C_Mem_Write(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_CTRL_REG1_A, 1, &Settings, 1, 100);
 80040ec:	2364      	movs	r3, #100	; 0x64
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	2301      	movs	r3, #1
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	1dfb      	adds	r3, r7, #7
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2301      	movs	r3, #1
 80040fa:	2220      	movs	r2, #32
 80040fc:	2132      	movs	r1, #50	; 0x32
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <setup+0x40>)
 8004100:	f002 f8ac 	bl	800625c <HAL_I2C_Mem_Write>

//	Settings = LSM303_ACC_I1_DRDY2;
//HAL_I2C_Mem_Write(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_CTRL_REG3_A, 1, &Settings, 1, 100);
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200001f4 	.word	0x200001f4
 8004110:	20000c88 	.word	0x20000c88
 8004114:	2000009c 	.word	0x2000009c

08004118 <loop>:

void loop()
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af04      	add	r7, sp, #16
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800411e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004122:	4869      	ldr	r0, [pc, #420]	; (80042c8 <loop+0x1b0>)
 8004124:	f001 ff47 	bl	8005fb6 <HAL_GPIO_TogglePin>
	HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_X_L_A_MULTI_READ, 1, Data, 6, 100);
 8004128:	2364      	movs	r3, #100	; 0x64
 800412a:	9302      	str	r3, [sp, #8]
 800412c:	2306      	movs	r3, #6
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	4b66      	ldr	r3, [pc, #408]	; (80042cc <loop+0x1b4>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	22a8      	movs	r2, #168	; 0xa8
 8004138:	2132      	movs	r1, #50	; 0x32
 800413a:	4865      	ldr	r0, [pc, #404]	; (80042d0 <loop+0x1b8>)
 800413c:	f002 f988 	bl	8006450 <HAL_I2C_Mem_Read>
	// Konwersja odebranych bajtow danych na typ int16_t
	Xaxis = ((Data[1] << 8) | Data[0]);
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <loop+0x1b4>)
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	b21a      	sxth	r2, r3
 8004148:	4b60      	ldr	r3, [pc, #384]	; (80042cc <loop+0x1b4>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b21b      	sxth	r3, r3
 800414e:	4313      	orrs	r3, r2
 8004150:	b21a      	sxth	r2, r3
 8004152:	4b60      	ldr	r3, [pc, #384]	; (80042d4 <loop+0x1bc>)
 8004154:	801a      	strh	r2, [r3, #0]
	Yaxis = ((Data[3] << 8) | Data[2]);
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <loop+0x1b4>)
 8004158:	78db      	ldrb	r3, [r3, #3]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	b21a      	sxth	r2, r3
 800415e:	4b5b      	ldr	r3, [pc, #364]	; (80042cc <loop+0x1b4>)
 8004160:	789b      	ldrb	r3, [r3, #2]
 8004162:	b21b      	sxth	r3, r3
 8004164:	4313      	orrs	r3, r2
 8004166:	b21a      	sxth	r2, r3
 8004168:	4b5b      	ldr	r3, [pc, #364]	; (80042d8 <loop+0x1c0>)
 800416a:	801a      	strh	r2, [r3, #0]
	Zaxis = ((Data[5] << 8) | Data[4]);
 800416c:	4b57      	ldr	r3, [pc, #348]	; (80042cc <loop+0x1b4>)
 800416e:	795b      	ldrb	r3, [r3, #5]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	b21a      	sxth	r2, r3
 8004174:	4b55      	ldr	r3, [pc, #340]	; (80042cc <loop+0x1b4>)
 8004176:	791b      	ldrb	r3, [r3, #4]
 8004178:	b21b      	sxth	r3, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	b21a      	sxth	r2, r3
 800417e:	4b57      	ldr	r3, [pc, #348]	; (80042dc <loop+0x1c4>)
 8004180:	801a      	strh	r2, [r3, #0]

	// obliczenie przyspieszen w kazdej z osi w jednostce SI [g]
	Xaxis_g = ((float) Xaxis * LSM303_ACC_RESOLUTION) / (float) INT16_MAX;
 8004182:	4b54      	ldr	r3, [pc, #336]	; (80042d4 <loop+0x1bc>)
 8004184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004190:	ee17 0a90 	vmov	r0, s15
 8004194:	f7fc f98c 	bl	80004b0 <__aeabi_f2d>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	f7fc f82a 	bl	80001f4 <__adddf3>
 80041a0:	4603      	mov	r3, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	4618      	mov	r0, r3
 80041a6:	4621      	mov	r1, r4
 80041a8:	a345      	add	r3, pc, #276	; (adr r3, 80042c0 <loop+0x1a8>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc fb01 	bl	80007b4 <__aeabi_ddiv>
 80041b2:	4603      	mov	r3, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	4618      	mov	r0, r3
 80041b8:	4621      	mov	r1, r4
 80041ba:	f7fc fbe3 	bl	8000984 <__aeabi_d2f>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <loop+0x1c8>)
 80041c2:	601a      	str	r2, [r3, #0]
	Yaxis_g = ((float) Yaxis * LSM303_ACC_RESOLUTION) / (float) INT16_MAX;
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <loop+0x1c0>)
 80041c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d2:	ee17 0a90 	vmov	r0, s15
 80041d6:	f7fc f96b 	bl	80004b0 <__aeabi_f2d>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	f7fc f809 	bl	80001f4 <__adddf3>
 80041e2:	4603      	mov	r3, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	4618      	mov	r0, r3
 80041e8:	4621      	mov	r1, r4
 80041ea:	a335      	add	r3, pc, #212	; (adr r3, 80042c0 <loop+0x1a8>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc fae0 	bl	80007b4 <__aeabi_ddiv>
 80041f4:	4603      	mov	r3, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4618      	mov	r0, r3
 80041fa:	4621      	mov	r1, r4
 80041fc:	f7fc fbc2 	bl	8000984 <__aeabi_d2f>
 8004200:	4602      	mov	r2, r0
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <loop+0x1cc>)
 8004204:	601a      	str	r2, [r3, #0]
	Zaxis_g = ((float) Zaxis * LSM303_ACC_RESOLUTION) / (float) INT16_MAX;
 8004206:	4b35      	ldr	r3, [pc, #212]	; (80042dc <loop+0x1c4>)
 8004208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004214:	ee17 0a90 	vmov	r0, s15
 8004218:	f7fc f94a 	bl	80004b0 <__aeabi_f2d>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	f7fb ffe8 	bl	80001f4 <__adddf3>
 8004224:	4603      	mov	r3, r0
 8004226:	460c      	mov	r4, r1
 8004228:	4618      	mov	r0, r3
 800422a:	4621      	mov	r1, r4
 800422c:	a324      	add	r3, pc, #144	; (adr r3, 80042c0 <loop+0x1a8>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fc fabf 	bl	80007b4 <__aeabi_ddiv>
 8004236:	4603      	mov	r3, r0
 8004238:	460c      	mov	r4, r1
 800423a:	4618      	mov	r0, r3
 800423c:	4621      	mov	r1, r4
 800423e:	f7fc fba1 	bl	8000984 <__aeabi_d2f>
 8004242:	4602      	mov	r2, r0
 8004244:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <loop+0x1d0>)
 8004246:	601a      	str	r2, [r3, #0]

	axis[0] = Xaxis_g;
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <loop+0x1c8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <loop+0x1d4>)
 800424e:	6013      	str	r3, [r2, #0]
	axis[1] = Yaxis_g;
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <loop+0x1cc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <loop+0x1d4>)
 8004256:	6053      	str	r3, [r2, #4]
	axis[2] = Zaxis_g;
 8004258:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <loop+0x1d0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a23      	ldr	r2, [pc, #140]	; (80042ec <loop+0x1d4>)
 800425e:	6093      	str	r3, [r2, #8]
	//axis[0] = 1;
	//	axis[1] = 22;
	//	axis[2] = 3;
	imu.header.frame_id = odom;
 8004260:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <loop+0x1d8>)
 8004262:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <loop+0x1dc>)
 8004264:	615a      	str	r2, [r3, #20]
	//imu.child_frame_id = base_link;
	imu.linear_acceleration.x = axis[0];
 8004266:	4b21      	ldr	r3, [pc, #132]	; (80042ec <loop+0x1d4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc f920 	bl	80004b0 <__aeabi_f2d>
 8004270:	4603      	mov	r3, r0
 8004272:	460c      	mov	r4, r1
 8004274:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <loop+0x1d8>)
 8004276:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
	imu.linear_acceleration.y = axis[1];
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <loop+0x1d4>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fc f916 	bl	80004b0 <__aeabi_f2d>
 8004284:	4603      	mov	r3, r0
 8004286:	460c      	mov	r4, r1
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <loop+0x1d8>)
 800428a:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
	imu.linear_acceleration.z = axis[2];
 800428e:	4b17      	ldr	r3, [pc, #92]	; (80042ec <loop+0x1d4>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc f90c 	bl	80004b0 <__aeabi_f2d>
 8004298:	4603      	mov	r3, r0
 800429a:	460c      	mov	r4, r1
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <loop+0x1d8>)
 800429e:	e9c2 3442 	strd	r3, r4, [r2, #264]	; 0x108
	pub_imu.publish(&imu);
 80042a2:	4913      	ldr	r1, [pc, #76]	; (80042f0 <loop+0x1d8>)
 80042a4:	4814      	ldr	r0, [pc, #80]	; (80042f8 <loop+0x1e0>)
 80042a6:	f7fd fd30 	bl	8001d0a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 80042aa:	4814      	ldr	r0, [pc, #80]	; (80042fc <loop+0x1e4>)
 80042ac:	f000 f955 	bl	800455a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(400);
 80042b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80042b4:	f001 f820 	bl	80052f8 <HAL_Delay>

}
 80042b8:	bf00      	nop
 80042ba:	3704      	adds	r7, #4
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd90      	pop	{r4, r7, pc}
 80042c0:	00000000 	.word	0x00000000
 80042c4:	40dfffc0 	.word	0x40dfffc0
 80042c8:	40020c00 	.word	0x40020c00
 80042cc:	20000c9c 	.word	0x20000c9c
 80042d0:	2000009c 	.word	0x2000009c
 80042d4:	20000ca2 	.word	0x20000ca2
 80042d8:	20000ca4 	.word	0x20000ca4
 80042dc:	20000ca6 	.word	0x20000ca6
 80042e0:	20000ca8 	.word	0x20000ca8
 80042e4:	20000cac 	.word	0x20000cac
 80042e8:	20000cb0 	.word	0x20000cb0
 80042ec:	20000cb4 	.word	0x20000cb4
 80042f0:	20000b30 	.word	0x20000b30
 80042f4:	20000000 	.word	0x20000000
 80042f8:	20000c88 	.word	0x20000c88
 80042fc:	200001f4 	.word	0x200001f4

08004300 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d80d      	bhi.n	8004330 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	fa22 f103 	lsr.w	r1, r2, r3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	b2ca      	uxtb	r2, r1
 8004326:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e7ee      	b.n	800430e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d811      	bhi.n	800437a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	440a      	add	r2, r1
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	4611      	mov	r1, r2
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	00d2      	lsls	r2, r2, #3
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3301      	adds	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e7ea      	b.n	8004350 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b18      	cmp	r3, #24
 8004398:	dc1e      	bgt.n	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	60da      	str	r2, [r3, #12]
        return true;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e004      	b.n	80043da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e7dd      	b.n	8004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80043d8:	2300      	movs	r3, #0
  }
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	08008d24 	.word	0x08008d24

08004408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
  NodeHandle_() : configured_(false)
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ffe8 	bl	80043e8 <_ZN3ros15NodeHandleBase_C1Ev>
 8004418:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fca4 	bl	8001d70 <_ZN13STM32HardwareC1Ev>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd f98e 	bl	8001758 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b18      	cmp	r3, #24
 8004444:	d80b      	bhi.n	800445e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3301      	adds	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e7f0      	b.n	8004440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b18      	cmp	r3, #24
 8004466:	d80a      	bhi.n	800447e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004470:	2100      	movs	r1, #0
 8004472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3301      	adds	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e7f1      	b.n	8004462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d20a      	bcs.n	80044a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	e7f0      	b.n	8004482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044aa:	d20a      	bcs.n	80044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3301      	adds	r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	e7f0      	b.n	80044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>
    req_param_resp.ints_length = 0;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    spin_timeout_ = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	08008cc8 	.word	0x08008cc8

08004508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
  }
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	4618      	mov	r0, r3
 800452e:	f7fd fc3b 	bl	8001da8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fd0c 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 800456c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800457c:	4293      	cmp	r3, r2
 800457e:	d903      	bls.n	8004588 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	429a      	cmp	r2, r3
 800459c:	d903      	bls.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d014      	beq.n	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fce5 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80045c6:	429a      	cmp	r2, r3
 80045c8:	bf8c      	ite	hi
 80045ca:	2301      	movhi	r3, #1
 80045cc:	2300      	movls	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80045d4:	f06f 0301 	mvn.w	r3, #1
 80045d8:	e197      	b.n	800490a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd fbfe 	bl	8001de0 <_ZN13STM32Hardware4readEv>
 80045e4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f2c0 8177 	blt.w	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	441a      	add	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004604:	2b07      	cmp	r3, #7
 8004606:	d11e      	bne.n	8004646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	b2d1      	uxtb	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	460a      	mov	r2, r1
 8004620:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800462a:	1e5a      	subs	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1b4      	bne.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2208      	movs	r2, #8
 8004640:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004644:	e7af      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800464c:	2b00      	cmp	r3, #0
 800464e:	d128      	bne.n	80046a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2bff      	cmp	r3, #255	; 0xff
 8004654:	d10d      	bne.n	8004672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f103 0214 	add.w	r2, r3, #20
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004670:	e799      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd fc84 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	bf8c      	ite	hi
 800468a:	2301      	movhi	r3, #1
 800468c:	2300      	movls	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d088      	beq.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800469c:	f06f 0301 	mvn.w	r3, #1
 80046a0:	e133      	b.n	800490a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d11b      	bne.n	80046e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2bfe      	cmp	r3, #254	; 0xfe
 80046b0:	d107      	bne.n	80046c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80046c0:	e771      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f43f af65 	beq.w	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f918 	bl	8004912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80046e2:	e760      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d113      	bne.n	8004716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004714:	e747      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800471c:	2b03      	cmp	r3, #3
 800471e:	d110      	bne.n	8004742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004740:	e731      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004748:	2b04      	cmp	r3, #4
 800474a:	d116      	bne.n	800477a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004752:	425a      	negs	r2, r3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	bf58      	it	pl
 800475a:	4253      	negpl	r3, r2
 800475c:	2bff      	cmp	r3, #255	; 0xff
 800475e:	d107      	bne.n	8004770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800476e:	e71a      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004778:	e715      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004780:	2b05      	cmp	r3, #5
 8004782:	d10f      	bne.n	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80047a2:	e700      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d117      	bne.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	441a      	add	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2207      	movs	r2, #7
 80047c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f47f aee9 	bne.w	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2208      	movs	r2, #8
 80047d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80047dc:	e6e3      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	f47f aede 	bne.w	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80047f8:	425a      	negs	r2, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	bf58      	it	pl
 8004800:	4253      	negpl	r3, r2
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	f47f aecf 	bne.w	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d110      	bne.n	8004834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f87d 	bl	8004912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f898 	bl	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004832:	e06a      	b.n	800490a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800483a:	2b0a      	cmp	r3, #10
 800483c:	d107      	bne.n	800484e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f960 	bl	8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800484c:	e6ab      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004854:	2b06      	cmp	r3, #6
 8004856:	d10e      	bne.n	8004876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f7fd f8ab 	bl	80019c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004874:	e697      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800487c:	2b0b      	cmp	r3, #11
 800487e:	d104      	bne.n	800488a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004888:	e68d      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004890:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f202 2222 	addw	r2, r2, #546	; 0x222
 800489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f43f ae81 	beq.w	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048aa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048be:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80048d6:	4611      	mov	r1, r2
 80048d8:	4798      	blx	r3
    while (true)
 80048da:	e664      	b.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80048dc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d906      	bls.n	8004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f809 	bl	8004912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8004908:	2300      	movs	r3, #0
  }
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fbb6 	bl	8001090 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f107 020c 	add.w	r2, r7, #12
 800492e:	210a      	movs	r1, #10
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
    rt_time = hardware_.time();
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7fd fb23 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 800493e:	4602      	mov	r2, r0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800494e:	b590      	push	{r4, r7, lr}
 8004950:	b08b      	sub	sp, #44	; 0x2c
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fc88 	bl	8001270 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2b18      	cmp	r3, #24
 8004968:	dc63      	bgt.n	8004a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d056      	beq.n	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	b29b      	uxth	r3, r3
 800498e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4608      	mov	r0, r1
 80049ca:	4798      	blx	r3
 80049cc:	4603      	mov	r3, r0
 80049ce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4608      	mov	r0, r1
 80049f8:	4798      	blx	r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80049fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a02:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fd f98a 	bl	8001d32 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a1e:	4601      	mov	r1, r0
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	461a      	mov	r2, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a30:	e798      	b.n	8004964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	2b18      	cmp	r3, #24
 8004a3a:	dc5f      	bgt.n	8004afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d053      	beq.n	8004af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a62:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4798      	blx	r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4798      	blx	r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004abe:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681c      	ldr	r4, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	4798      	blx	r3
 8004ae8:	4601      	mov	r1, r0
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	461a      	mov	r2, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	3301      	adds	r3, #1
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	e79c      	b.n	8004a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004b04:	bf00      	nop
 8004b06:	372c      	adds	r7, #44	; 0x2c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd90      	pop	{r4, r7, pc}

08004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc fab8 	bl	8001090 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd fa2d 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b36:	f107 0308 	add.w	r3, r7, #8
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc fb17 	bl	8001170 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4915      	ldr	r1, [pc, #84]	; (8004b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b48:	fba1 1303 	umull	r1, r3, r1, r3
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b52:	6939      	ldr	r1, [r7, #16]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b58:	fba3 0302 	umull	r0, r3, r3, r2
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	440b      	add	r3, r1
 8004b70:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004b72:	f107 0308 	add.w	r3, r7, #8
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8a4 	bl	8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd f9fd 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	10624dd3 	.word	0x10624dd3
 8004ba0:	000f4240 	.word	0x000f4240

08004ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b63      	cmp	r3, #99	; 0x63
 8004bb4:	dd09      	ble.n	8004bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004bbc:	f083 0301 	eor.w	r3, r3, #1
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e077      	b.n	8004cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004bd6:	3207      	adds	r2, #7
 8004bd8:	4611      	mov	r1, r2
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
 8004bde:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	22fe      	movs	r2, #254	; 0xfe
 8004bec:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	121b      	asrs	r3, r3, #8
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004c14:	4413      	add	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	121b      	asrs	r3, r3, #8
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c3e:	2305      	movs	r3, #5
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	3307      	adds	r3, #7
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	da0d      	bge.n	8004c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e7ec      	b.n	8004c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	425a      	negs	r2, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	bf58      	it	pl
 8004c78:	4253      	negpl	r3, r2
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	6179      	str	r1, [r7, #20]
 8004c82:	43d2      	mvns	r2, r2
 8004c84:	b2d1      	uxtb	r1, r2
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c96:	dc0a      	bgt.n	8004cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1d18      	adds	r0, r3, #4
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f7fd f927 	bl	8001ef8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	e005      	b.n	8004cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004cae:	4905      	ldr	r1, [pc, #20]	; (8004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f849 	bl	8004d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08008c4c 	.word	0x08008c4c

08004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd f954 	bl	8001f84 <_ZN13STM32Hardware4timeEv>
 8004cdc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4915      	ldr	r1, [pc, #84]	; (8004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004ce6:	fba1 1303 	umull	r1, r3, r1, r3
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	1e5a      	subs	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d08:	fb00 f303 	mul.w	r3, r0, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	1aca      	subs	r2, r1, r3
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fb fff8 	bl	8000d24 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	000f4240 	.word	0x000f4240
 8004d44:	3b9aca00 	.word	0x3b9aca00

08004d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	2103      	movs	r1, #3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f804 	bl	8004d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004d72:	f107 0314 	add.w	r3, r7, #20
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc fc3e 	bl	80015f8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
 8004d7e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f107 0214 	add.w	r2, r7, #20
 8004d8e:	2107      	movs	r1, #7
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	4798      	blx	r3
  }
 8004d94:	bf00      	nop
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_Z41__static_initialization_and_destruction_0ii>:
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d110      	bne.n	8004dce <_Z41__static_initialization_and_destruction_0ii+0x32>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10b      	bne.n	8004dce <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8004db6:	4808      	ldr	r0, [pc, #32]	; (8004dd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004db8:	f7ff fb26 	bl	8004408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu;
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004dbe:	f7fe fc65 	bl	800368c <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("imu", &imu);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004dc6:	4906      	ldr	r1, [pc, #24]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004dc8:	4806      	ldr	r0, [pc, #24]	; (8004de4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004dca:	f7fc ff87 	bl	8001cdc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200001f4 	.word	0x200001f4
 8004ddc:	20000b30 	.word	0x20000b30
 8004de0:	08008c88 	.word	0x08008c88
 8004de4:	20000c88 	.word	0x20000c88

08004de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    return configured_;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <_GLOBAL__sub_I_nh>:
 8004e02:	b580      	push	{r7, lr}
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f7ff ffc6 	bl	8004d9c <_Z41__static_initialization_and_destruction_0ii>
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e28:	6453      	str	r3, [r2, #68]	; 0x44
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a19      	ldr	r2, [pc, #100]	; (8004ee8 <HAL_I2C_MspInit+0x84>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d12c      	bne.n	8004ee0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_I2C_MspInit+0x88>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_I2C_MspInit+0x88>)
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_I2C_MspInit+0x88>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004ea2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea8:	2312      	movs	r3, #18
 8004eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eac:	2301      	movs	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <HAL_I2C_MspInit+0x8c>)
 8004ec0:	f000 fede 	bl	8005c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <HAL_I2C_MspInit+0x88>)
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <HAL_I2C_MspInit+0x88>)
 8004ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_I2C_MspInit+0x88>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ee0:	bf00      	nop
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40005400 	.word	0x40005400
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020400 	.word	0x40020400

08004ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a4c      	ldr	r2, [pc, #304]	; (8005044 <HAL_UART_MspInit+0x150>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	f040 8092 	bne.w	800503c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	4b4a      	ldr	r3, [pc, #296]	; (8005048 <HAL_UART_MspInit+0x154>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	4a49      	ldr	r2, [pc, #292]	; (8005048 <HAL_UART_MspInit+0x154>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f26:	6413      	str	r3, [r2, #64]	; 0x40
 8004f28:	4b47      	ldr	r3, [pc, #284]	; (8005048 <HAL_UART_MspInit+0x154>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_UART_MspInit+0x154>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	4a42      	ldr	r2, [pc, #264]	; (8005048 <HAL_UART_MspInit+0x154>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6313      	str	r3, [r2, #48]	; 0x30
 8004f44:	4b40      	ldr	r3, [pc, #256]	; (8005048 <HAL_UART_MspInit+0x154>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f50:	230c      	movs	r3, #12
 8004f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f54:	2302      	movs	r3, #2
 8004f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f60:	2307      	movs	r3, #7
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4838      	ldr	r0, [pc, #224]	; (800504c <HAL_UART_MspInit+0x158>)
 8004f6c:	f000 fe88 	bl	8005c80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004f70:	4b37      	ldr	r3, [pc, #220]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f72:	4a38      	ldr	r2, [pc, #224]	; (8005054 <HAL_UART_MspInit+0x160>)
 8004f74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004f76:	4b36      	ldr	r3, [pc, #216]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f7e:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004fa4:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004faa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fac:	4b28      	ldr	r3, [pc, #160]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004fb2:	4827      	ldr	r0, [pc, #156]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004fb4:	f000 fad4 	bl	8005560 <HAL_DMA_Init>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004fbe:	f7fc f83f 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <HAL_UART_MspInit+0x15c>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004fce:	4b22      	ldr	r3, [pc, #136]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_UART_MspInit+0x168>)
 8004fd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004fd4:	4b20      	ldr	r3, [pc, #128]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004fde:	2240      	movs	r2, #64	; 0x40
 8004fe0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004ffc:	4b16      	ldr	r3, [pc, #88]	; (8005058 <HAL_UART_MspInit+0x164>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <HAL_UART_MspInit+0x164>)
 8005004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005008:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_UART_MspInit+0x164>)
 800500c:	2200      	movs	r2, #0
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005010:	4811      	ldr	r0, [pc, #68]	; (8005058 <HAL_UART_MspInit+0x164>)
 8005012:	f000 faa5 	bl	8005560 <HAL_DMA_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800501c:	f7fc f810 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <HAL_UART_MspInit+0x164>)
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
 8005026:	4a0c      	ldr	r2, [pc, #48]	; (8005058 <HAL_UART_MspInit+0x164>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	2026      	movs	r0, #38	; 0x26
 8005032:	f000 fa5e 	bl	80054f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005036:	2026      	movs	r0, #38	; 0x26
 8005038:	f000 fa77 	bl	800552a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800503c:	bf00      	nop
 800503e:	3728      	adds	r7, #40	; 0x28
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40004400 	.word	0x40004400
 8005048:	40023800 	.word	0x40023800
 800504c:	40020000 	.word	0x40020000
 8005050:	20000130 	.word	0x20000130
 8005054:	40026088 	.word	0x40026088
 8005058:	20000190 	.word	0x20000190
 800505c:	400260a0 	.word	0x400260a0

08005060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800506e:	b480      	push	{r7}
 8005070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005072:	e7fe      	b.n	8005072 <HardFault_Handler+0x4>

08005074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005078:	e7fe      	b.n	8005078 <MemManage_Handler+0x4>

0800507a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800507a:	b480      	push	{r7}
 800507c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800507e:	e7fe      	b.n	800507e <BusFault_Handler+0x4>

08005080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005084:	e7fe      	b.n	8005084 <UsageFault_Handler+0x4>

08005086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050b4:	f000 f900 	bl	80052b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}

080050bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80050c0:	4802      	ldr	r0, [pc, #8]	; (80050cc <DMA1_Stream5_IRQHandler+0x10>)
 80050c2:	f000 fb75 	bl	80057b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000130 	.word	0x20000130

080050d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <DMA1_Stream6_IRQHandler+0x10>)
 80050d6:	f000 fb6b 	bl	80057b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000190 	.word	0x20000190

080050e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80050e8:	4802      	ldr	r0, [pc, #8]	; (80050f4 <USART2_IRQHandler+0x10>)
 80050ea:	f002 fca5 	bl	8007a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200000f0 	.word	0x200000f0

080050f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
	return 1;
 80050fc:	2301      	movs	r3, #1
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <_kill>:

int _kill(int pid, int sig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005112:	f003 fb41 	bl	8008798 <__errno>
 8005116:	4602      	mov	r2, r0
 8005118:	2316      	movs	r3, #22
 800511a:	6013      	str	r3, [r2, #0]
	return -1;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <_exit>:

void _exit (int status)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ffe7 	bl	8005108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800513a:	e7fe      	b.n	800513a <_exit+0x12>

0800513c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005144:	4b11      	ldr	r3, [pc, #68]	; (800518c <_sbrk+0x50>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <_sbrk+0x16>
		heap_end = &end;
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <_sbrk+0x50>)
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <_sbrk+0x54>)
 8005150:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <_sbrk+0x50>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <_sbrk+0x50>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	466a      	mov	r2, sp
 8005162:	4293      	cmp	r3, r2
 8005164:	d907      	bls.n	8005176 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005166:	f003 fb17 	bl	8008798 <__errno>
 800516a:	4602      	mov	r2, r0
 800516c:	230c      	movs	r3, #12
 800516e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005174:	e006      	b.n	8005184 <_sbrk+0x48>
	}

	heap_end += incr;
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <_sbrk+0x50>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	4a03      	ldr	r2, [pc, #12]	; (800518c <_sbrk+0x50>)
 8005180:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005182:	68fb      	ldr	r3, [r7, #12]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000cbc 	.word	0x20000cbc
 8005190:	20000cd0 	.word	0x20000cd0

08005194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <SystemInit+0x28>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	4a07      	ldr	r2, [pc, #28]	; (80051bc <SystemInit+0x28>)
 80051a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <SystemInit+0x28>)
 80051aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051ae:	609a      	str	r2, [r3, #8]
#endif
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80051c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80051c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80051c6:	e003      	b.n	80051d0 <LoopCopyDataInit>

080051c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80051ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80051cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80051ce:	3104      	adds	r1, #4

080051d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80051d0:	480b      	ldr	r0, [pc, #44]	; (8005200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80051d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80051d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80051d8:	d3f6      	bcc.n	80051c8 <CopyDataInit>
  ldr  r2, =_sbss
 80051da:	4a0b      	ldr	r2, [pc, #44]	; (8005208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80051dc:	e002      	b.n	80051e4 <LoopFillZerobss>

080051de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80051de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80051e0:	f842 3b04 	str.w	r3, [r2], #4

080051e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80051e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80051e8:	d3f9      	bcc.n	80051de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051ea:	f7ff ffd3 	bl	8005194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051ee:	f003 fad9 	bl	80087a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051f2:	f7fb fdc3 	bl	8000d7c <main>
  bx  lr    
 80051f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80051f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80051fc:	08008ddc 	.word	0x08008ddc
  ldr  r0, =_sdata
 8005200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005204:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8005208:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800520c:	20000cd0 	.word	0x20000cd0

08005210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005210:	e7fe      	b.n	8005210 <ADC_IRQHandler>
	...

08005214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <HAL_Init+0x40>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <HAL_Init+0x40>)
 800521e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_Init+0x40>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <HAL_Init+0x40>)
 800522a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800522e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <HAL_Init+0x40>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a07      	ldr	r2, [pc, #28]	; (8005254 <HAL_Init+0x40>)
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800523c:	2003      	movs	r0, #3
 800523e:	f000 f94d 	bl	80054dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005242:	2000      	movs	r0, #0
 8005244:	f000 f808 	bl	8005258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005248:	f7ff fde4 	bl	8004e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023c00 	.word	0x40023c00

08005258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <HAL_InitTick+0x54>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_InitTick+0x58>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
 800526a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800526e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f965 	bl	8005546 <HAL_SYSTICK_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e00e      	b.n	80052a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b0f      	cmp	r3, #15
 800528a:	d80a      	bhi.n	80052a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800528c:	2200      	movs	r2, #0
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005294:	f000 f92d 	bl	80054f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005298:	4a06      	ldr	r2, [pc, #24]	; (80052b4 <HAL_InitTick+0x5c>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	e000      	b.n	80052a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000008 	.word	0x20000008
 80052b0:	20000010 	.word	0x20000010
 80052b4:	2000000c 	.word	0x2000000c

080052b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052bc:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_IncTick+0x20>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_IncTick+0x24>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4413      	add	r3, r2
 80052c8:	4a04      	ldr	r2, [pc, #16]	; (80052dc <HAL_IncTick+0x24>)
 80052ca:	6013      	str	r3, [r2, #0]
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000010 	.word	0x20000010
 80052dc:	20000cc8 	.word	0x20000cc8

080052e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return uwTick;
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <HAL_GetTick+0x14>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000cc8 	.word	0x20000cc8

080052f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005300:	f7ff ffee 	bl	80052e0 <HAL_GetTick>
 8005304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005310:	d005      	beq.n	800531e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <HAL_Delay+0x40>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800531e:	bf00      	nop
 8005320:	f7ff ffde 	bl	80052e0 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d8f7      	bhi.n	8005320 <HAL_Delay+0x28>
  {
  }
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000010 	.word	0x20000010

0800533c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <__NVIC_SetPriorityGrouping+0x44>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005358:	4013      	ands	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536e:	4a04      	ldr	r2, [pc, #16]	; (8005380 <__NVIC_SetPriorityGrouping+0x44>)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	60d3      	str	r3, [r2, #12]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <__NVIC_GetPriorityGrouping+0x18>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	f003 0307 	and.w	r3, r3, #7
}
 8005392:	4618      	mov	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	db0b      	blt.n	80053ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	f003 021f 	and.w	r2, r3, #31
 80053b8:	4907      	ldr	r1, [pc, #28]	; (80053d8 <__NVIC_EnableIRQ+0x38>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	2001      	movs	r0, #1
 80053c2:	fa00 f202 	lsl.w	r2, r0, r2
 80053c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	e000e100 	.word	0xe000e100

080053dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	6039      	str	r1, [r7, #0]
 80053e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	db0a      	blt.n	8005406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	490c      	ldr	r1, [pc, #48]	; (8005428 <__NVIC_SetPriority+0x4c>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	0112      	lsls	r2, r2, #4
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	440b      	add	r3, r1
 8005400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005404:	e00a      	b.n	800541c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4908      	ldr	r1, [pc, #32]	; (800542c <__NVIC_SetPriority+0x50>)
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	3b04      	subs	r3, #4
 8005414:	0112      	lsls	r2, r2, #4
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	440b      	add	r3, r1
 800541a:	761a      	strb	r2, [r3, #24]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000e100 	.word	0xe000e100
 800542c:	e000ed00 	.word	0xe000ed00

08005430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f1c3 0307 	rsb	r3, r3, #7
 800544a:	2b04      	cmp	r3, #4
 800544c:	bf28      	it	cs
 800544e:	2304      	movcs	r3, #4
 8005450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3304      	adds	r3, #4
 8005456:	2b06      	cmp	r3, #6
 8005458:	d902      	bls.n	8005460 <NVIC_EncodePriority+0x30>
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3b03      	subs	r3, #3
 800545e:	e000      	b.n	8005462 <NVIC_EncodePriority+0x32>
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43da      	mvns	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	401a      	ands	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	43d9      	mvns	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005488:	4313      	orrs	r3, r2
         );
}
 800548a:	4618      	mov	r0, r3
 800548c:	3724      	adds	r7, #36	; 0x24
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054a8:	d301      	bcc.n	80054ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00f      	b.n	80054ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <SysTick_Config+0x40>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054b6:	210f      	movs	r1, #15
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054bc:	f7ff ff8e 	bl	80053dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <SysTick_Config+0x40>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054c6:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <SysTick_Config+0x40>)
 80054c8:	2207      	movs	r2, #7
 80054ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	e000e010 	.word	0xe000e010

080054dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ff29 	bl	800533c <__NVIC_SetPriorityGrouping>
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	4603      	mov	r3, r0
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005504:	f7ff ff3e 	bl	8005384 <__NVIC_GetPriorityGrouping>
 8005508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	6978      	ldr	r0, [r7, #20]
 8005510:	f7ff ff8e 	bl	8005430 <NVIC_EncodePriority>
 8005514:	4602      	mov	r2, r0
 8005516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff5d 	bl	80053dc <__NVIC_SetPriority>
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	4603      	mov	r3, r0
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff31 	bl	80053a0 <__NVIC_EnableIRQ>
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ffa2 	bl	8005498 <SysTick_Config>
 8005554:	4603      	mov	r3, r0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800556c:	f7ff feb8 	bl	80052e0 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e099      	b.n	80056b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800559c:	e00f      	b.n	80055be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800559e:	f7ff fe9f 	bl	80052e0 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d908      	bls.n	80055be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2203      	movs	r2, #3
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e078      	b.n	80056b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e8      	bne.n	800559e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <HAL_DMA_Init+0x158>)
 80055d8:	4013      	ands	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b04      	cmp	r3, #4
 8005616:	d107      	bne.n	8005628 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	4313      	orrs	r3, r2
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b04      	cmp	r3, #4
 8005650:	d117      	bne.n	8005682 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa91 	bl	8005b8c <DMA_CheckFifoParam>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2240      	movs	r2, #64	; 0x40
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800567e:	2301      	movs	r3, #1
 8005680:	e016      	b.n	80056b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa48 	bl	8005b20 <DMA_CalcBaseAndBitshift>
 8005690:	4603      	mov	r3, r0
 8005692:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	223f      	movs	r2, #63	; 0x3f
 800569a:	409a      	lsls	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	f010803f 	.word	0xf010803f

080056bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_DMA_Start_IT+0x26>
 80056de:	2302      	movs	r3, #2
 80056e0:	e040      	b.n	8005764 <HAL_DMA_Start_IT+0xa8>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d12f      	bne.n	8005756 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f9da 	bl	8005ac4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005714:	223f      	movs	r2, #63	; 0x3f
 8005716:	409a      	lsls	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0216 	orr.w	r2, r2, #22
 800572a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0208 	orr.w	r2, r2, #8
 8005742:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e005      	b.n	8005762 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800575e:	2302      	movs	r3, #2
 8005760:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d004      	beq.n	800578a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e00c      	b.n	80057a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2205      	movs	r2, #5
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057bc:	4b92      	ldr	r3, [pc, #584]	; (8005a08 <HAL_DMA_IRQHandler+0x258>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a92      	ldr	r2, [pc, #584]	; (8005a0c <HAL_DMA_IRQHandler+0x25c>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0a9b      	lsrs	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	2208      	movs	r2, #8
 80057dc:	409a      	lsls	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01a      	beq.n	800581c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0204 	bic.w	r2, r2, #4
 8005802:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	2208      	movs	r2, #8
 800580a:	409a      	lsls	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	f043 0201 	orr.w	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	2201      	movs	r2, #1
 8005840:	409a      	lsls	r2, r3
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f043 0202 	orr.w	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	2204      	movs	r2, #4
 8005858:	409a      	lsls	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4013      	ands	r3, r2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d012      	beq.n	8005888 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	2204      	movs	r2, #4
 8005876:	409a      	lsls	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f043 0204 	orr.w	r2, r3, #4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	2210      	movs	r2, #16
 800588e:	409a      	lsls	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d043      	beq.n	8005920 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03c      	beq.n	8005920 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	2210      	movs	r2, #16
 80058ac:	409a      	lsls	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d018      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d108      	bne.n	80058e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d024      	beq.n	8005920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
 80058de:	e01f      	b.n	8005920 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
 80058f0:	e016      	b.n	8005920 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0208 	bic.w	r2, r2, #8
 800590e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	2220      	movs	r2, #32
 8005926:	409a      	lsls	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 808e 	beq.w	8005a4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8086 	beq.w	8005a4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	2220      	movs	r2, #32
 8005948:	409a      	lsls	r2, r3
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b05      	cmp	r3, #5
 8005958:	d136      	bne.n	80059c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0216 	bic.w	r2, r2, #22
 8005968:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005978:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <HAL_DMA_IRQHandler+0x1da>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0208 	bic.w	r2, r2, #8
 8005998:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	223f      	movs	r2, #63	; 0x3f
 80059a0:	409a      	lsls	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d07d      	beq.n	8005aba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
        }
        return;
 80059c6:	e078      	b.n	8005aba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01c      	beq.n	8005a10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d030      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
 80059f4:	e02b      	b.n	8005a4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d027      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	e022      	b.n	8005a4e <HAL_DMA_IRQHandler+0x29e>
 8005a08:	20000008 	.word	0x20000008
 8005a0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10f      	bne.n	8005a3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0210 	bic.w	r2, r2, #16
 8005a2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d032      	beq.n	8005abc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d022      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2205      	movs	r2, #5
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d307      	bcc.n	8005a96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f2      	bne.n	8005a7a <HAL_DMA_IRQHandler+0x2ca>
 8005a94:	e000      	b.n	8005a98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005a96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	4798      	blx	r3
 8005ab8:	e000      	b.n	8005abc <HAL_DMA_IRQHandler+0x30c>
        return;
 8005aba:	bf00      	nop
    }
  }
}
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d108      	bne.n	8005b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b02:	e007      	b.n	8005b14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	3b10      	subs	r3, #16
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <DMA_CalcBaseAndBitshift+0x64>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b3a:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <DMA_CalcBaseAndBitshift+0x68>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d909      	bls.n	8005b62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	1d1a      	adds	r2, r3, #4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b60:	e007      	b.n	8005b72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	aaaaaaab 	.word	0xaaaaaaab
 8005b88:	08008dc0 	.word	0x08008dc0

08005b8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11f      	bne.n	8005be6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d855      	bhi.n	8005c58 <DMA_CheckFifoParam+0xcc>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <DMA_CheckFifoParam+0x28>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bd7 	.word	0x08005bd7
 8005bbc:	08005bc5 	.word	0x08005bc5
 8005bc0:	08005c59 	.word	0x08005c59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d045      	beq.n	8005c5c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bd4:	e042      	b.n	8005c5c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bde:	d13f      	bne.n	8005c60 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be4:	e03c      	b.n	8005c60 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	d121      	bne.n	8005c34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d836      	bhi.n	8005c64 <DMA_CheckFifoParam+0xd8>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <DMA_CheckFifoParam+0x70>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c0d 	.word	0x08005c0d
 8005c00:	08005c13 	.word	0x08005c13
 8005c04:	08005c0d 	.word	0x08005c0d
 8005c08:	08005c25 	.word	0x08005c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c10:	e02f      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d024      	beq.n	8005c68 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c22:	e021      	b.n	8005c68 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c2c:	d11e      	bne.n	8005c6c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c32:	e01b      	b.n	8005c6c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <DMA_CheckFifoParam+0xb4>
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d003      	beq.n	8005c46 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c3e:	e018      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	e015      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00e      	beq.n	8005c70 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      break;
 8005c56:	e00b      	b.n	8005c70 <DMA_CheckFifoParam+0xe4>
      break;
 8005c58:	bf00      	nop
 8005c5a:	e00a      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;
 8005c5c:	bf00      	nop
 8005c5e:	e008      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;
 8005c60:	bf00      	nop
 8005c62:	e006      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;
 8005c64:	bf00      	nop
 8005c66:	e004      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;   
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;
 8005c70:	bf00      	nop
    }
  } 
  
  return status; 
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e159      	b.n	8005f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4013      	ands	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f040 8148 	bne.w	8005f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d00b      	beq.n	8005cda <HAL_GPIO_Init+0x5a>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d007      	beq.n	8005cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cce:	2b11      	cmp	r3, #17
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b12      	cmp	r3, #18
 8005cd8:	d130      	bne.n	8005d3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d10:	2201      	movs	r2, #1
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	f003 0201 	and.w	r2, r3, #1
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	2203      	movs	r2, #3
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d003      	beq.n	8005d7c <HAL_GPIO_Init+0xfc>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b12      	cmp	r3, #18
 8005d7a:	d123      	bne.n	8005dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	08da      	lsrs	r2, r3, #3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3208      	adds	r2, #8
 8005d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	220f      	movs	r2, #15
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	08da      	lsrs	r2, r3, #3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3208      	adds	r2, #8
 8005dbe:	69b9      	ldr	r1, [r7, #24]
 8005dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	2203      	movs	r2, #3
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0203 	and.w	r2, r3, #3
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80a2 	beq.w	8005f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <HAL_GPIO_Init+0x2e4>)
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	4a55      	ldr	r2, [pc, #340]	; (8005f64 <HAL_GPIO_Init+0x2e4>)
 8005e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e14:	6453      	str	r3, [r2, #68]	; 0x44
 8005e16:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <HAL_GPIO_Init+0x2e4>)
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e22:	4a51      	ldr	r2, [pc, #324]	; (8005f68 <HAL_GPIO_Init+0x2e8>)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	3302      	adds	r3, #2
 8005e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	220f      	movs	r2, #15
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a48      	ldr	r2, [pc, #288]	; (8005f6c <HAL_GPIO_Init+0x2ec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d019      	beq.n	8005e82 <HAL_GPIO_Init+0x202>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a47      	ldr	r2, [pc, #284]	; (8005f70 <HAL_GPIO_Init+0x2f0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_GPIO_Init+0x1fe>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a46      	ldr	r2, [pc, #280]	; (8005f74 <HAL_GPIO_Init+0x2f4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00d      	beq.n	8005e7a <HAL_GPIO_Init+0x1fa>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a45      	ldr	r2, [pc, #276]	; (8005f78 <HAL_GPIO_Init+0x2f8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <HAL_GPIO_Init+0x1f6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a44      	ldr	r2, [pc, #272]	; (8005f7c <HAL_GPIO_Init+0x2fc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_GPIO_Init+0x1f2>
 8005e6e:	2304      	movs	r3, #4
 8005e70:	e008      	b.n	8005e84 <HAL_GPIO_Init+0x204>
 8005e72:	2307      	movs	r3, #7
 8005e74:	e006      	b.n	8005e84 <HAL_GPIO_Init+0x204>
 8005e76:	2303      	movs	r3, #3
 8005e78:	e004      	b.n	8005e84 <HAL_GPIO_Init+0x204>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e002      	b.n	8005e84 <HAL_GPIO_Init+0x204>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <HAL_GPIO_Init+0x204>
 8005e82:	2300      	movs	r3, #0
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	f002 0203 	and.w	r2, r2, #3
 8005e8a:	0092      	lsls	r2, r2, #2
 8005e8c:	4093      	lsls	r3, r2
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e94:	4934      	ldr	r1, [pc, #208]	; (8005f68 <HAL_GPIO_Init+0x2e8>)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	089b      	lsrs	r3, r3, #2
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ec6:	4a2e      	ldr	r2, [pc, #184]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ecc:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ef0:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ef6:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f1a:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f20:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f44:	4a0e      	ldr	r2, [pc, #56]	; (8005f80 <HAL_GPIO_Init+0x300>)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	f67f aea2 	bls.w	8005c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3724      	adds	r7, #36	; 0x24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40023800 	.word	0x40023800
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40020000 	.word	0x40020000
 8005f70:	40020400 	.word	0x40020400
 8005f74:	40020800 	.word	0x40020800
 8005f78:	40020c00 	.word	0x40020c00
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40013c00 	.word	0x40013c00

08005f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
 8005f90:	4613      	mov	r3, r2
 8005f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f94:	787b      	ldrb	r3, [r7, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fa0:	e003      	b.n	8005faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	041a      	lsls	r2, r3, #16
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	619a      	str	r2, [r3, #24]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	401a      	ands	r2, r3
 8005fca:	887b      	ldrh	r3, [r7, #2]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d104      	bne.n	8005fda <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fd0:	887b      	ldrh	r3, [r7, #2]
 8005fd2:	041a      	lsls	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005fd8:	e002      	b.n	8005fe0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005fda:	887a      	ldrh	r2, [r7, #2]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	619a      	str	r2, [r3, #24]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e11f      	b.n	800623e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fe ff26 	bl	8004e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2224      	movs	r2, #36	; 0x24
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006050:	f001 fb90 	bl	8007774 <HAL_RCC_GetPCLK1Freq>
 8006054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4a7b      	ldr	r2, [pc, #492]	; (8006248 <HAL_I2C_Init+0x25c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d807      	bhi.n	8006070 <HAL_I2C_Init+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a7a      	ldr	r2, [pc, #488]	; (800624c <HAL_I2C_Init+0x260>)
 8006064:	4293      	cmp	r3, r2
 8006066:	bf94      	ite	ls
 8006068:	2301      	movls	r3, #1
 800606a:	2300      	movhi	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e006      	b.n	800607e <HAL_I2C_Init+0x92>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a77      	ldr	r2, [pc, #476]	; (8006250 <HAL_I2C_Init+0x264>)
 8006074:	4293      	cmp	r3, r2
 8006076:	bf94      	ite	ls
 8006078:	2301      	movls	r3, #1
 800607a:	2300      	movhi	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e0db      	b.n	800623e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a72      	ldr	r2, [pc, #456]	; (8006254 <HAL_I2C_Init+0x268>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0c9b      	lsrs	r3, r3, #18
 8006090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a64      	ldr	r2, [pc, #400]	; (8006248 <HAL_I2C_Init+0x25c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d802      	bhi.n	80060c0 <HAL_I2C_Init+0xd4>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	e009      	b.n	80060d4 <HAL_I2C_Init+0xe8>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	4a63      	ldr	r2, [pc, #396]	; (8006258 <HAL_I2C_Init+0x26c>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	099b      	lsrs	r3, r3, #6
 80060d2:	3301      	adds	r3, #1
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	430b      	orrs	r3, r1
 80060da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4956      	ldr	r1, [pc, #344]	; (8006248 <HAL_I2C_Init+0x25c>)
 80060f0:	428b      	cmp	r3, r1
 80060f2:	d80d      	bhi.n	8006110 <HAL_I2C_Init+0x124>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1e59      	subs	r1, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006102:	3301      	adds	r3, #1
 8006104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006108:	2b04      	cmp	r3, #4
 800610a:	bf38      	it	cc
 800610c:	2304      	movcc	r3, #4
 800610e:	e04f      	b.n	80061b0 <HAL_I2C_Init+0x1c4>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d111      	bne.n	800613c <HAL_I2C_Init+0x150>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	1e58      	subs	r0, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6859      	ldr	r1, [r3, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	440b      	add	r3, r1
 8006126:	fbb0 f3f3 	udiv	r3, r0, r3
 800612a:	3301      	adds	r3, #1
 800612c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e012      	b.n	8006162 <HAL_I2C_Init+0x176>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1e58      	subs	r0, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	0099      	lsls	r1, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006152:	3301      	adds	r3, #1
 8006154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_I2C_Init+0x17e>
 8006166:	2301      	movs	r3, #1
 8006168:	e022      	b.n	80061b0 <HAL_I2C_Init+0x1c4>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10e      	bne.n	8006190 <HAL_I2C_Init+0x1a4>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1e58      	subs	r0, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6859      	ldr	r1, [r3, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	440b      	add	r3, r1
 8006180:	fbb0 f3f3 	udiv	r3, r0, r3
 8006184:	3301      	adds	r3, #1
 8006186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	e00f      	b.n	80061b0 <HAL_I2C_Init+0x1c4>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1e58      	subs	r0, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6859      	ldr	r1, [r3, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	0099      	lsls	r1, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a6:	3301      	adds	r3, #1
 80061a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	6809      	ldr	r1, [r1, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6911      	ldr	r1, [r2, #16]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68d2      	ldr	r2, [r2, #12]
 80061ea:	4311      	orrs	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	000186a0 	.word	0x000186a0
 800624c:	001e847f 	.word	0x001e847f
 8006250:	003d08ff 	.word	0x003d08ff
 8006254:	431bde83 	.word	0x431bde83
 8006258:	10624dd3 	.word	0x10624dd3

0800625c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4603      	mov	r3, r0
 800626c:	817b      	strh	r3, [r7, #10]
 800626e:	460b      	mov	r3, r1
 8006270:	813b      	strh	r3, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006276:	f7ff f833 	bl	80052e0 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b20      	cmp	r3, #32
 8006286:	f040 80d9 	bne.w	800643c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	2319      	movs	r3, #25
 8006290:	2201      	movs	r2, #1
 8006292:	496d      	ldr	r1, [pc, #436]	; (8006448 <HAL_I2C_Mem_Write+0x1ec>)
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fc7b 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0cc      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2C_Mem_Write+0x56>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0c5      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d007      	beq.n	80062d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2221      	movs	r2, #33	; 0x21
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2240      	movs	r2, #64	; 0x40
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a4d      	ldr	r2, [pc, #308]	; (800644c <HAL_I2C_Mem_Write+0x1f0>)
 8006318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800631a:	88f8      	ldrh	r0, [r7, #6]
 800631c:	893a      	ldrh	r2, [r7, #8]
 800631e:	8979      	ldrh	r1, [r7, #10]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fab6 	bl	800689c <I2C_RequestMemoryWrite>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d052      	beq.n	80063dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e081      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fcfc 	bl	8006d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	2b04      	cmp	r3, #4
 8006350:	d107      	bne.n	8006362 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e06b      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_I2C_Mem_Write+0x180>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1aa      	bne.n	800633a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fce8 	bl	8006dbe <I2C_WaitOnBTFFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d107      	bne.n	800640c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e016      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	00100002 	.word	0x00100002
 800644c:	ffff0000 	.word	0xffff0000

08006450 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	; 0x30
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	461a      	mov	r2, r3
 800645e:	4603      	mov	r3, r0
 8006460:	817b      	strh	r3, [r7, #10]
 8006462:	460b      	mov	r3, r1
 8006464:	813b      	strh	r3, [r7, #8]
 8006466:	4613      	mov	r3, r2
 8006468:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800646a:	f7fe ff39 	bl	80052e0 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b20      	cmp	r3, #32
 800647a:	f040 8208 	bne.w	800688e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	2319      	movs	r3, #25
 8006484:	2201      	movs	r2, #1
 8006486:	497b      	ldr	r1, [pc, #492]	; (8006674 <HAL_I2C_Mem_Read+0x224>)
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fb81 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
 8006496:	e1fb      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_I2C_Mem_Read+0x56>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e1f4      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d007      	beq.n	80064cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2222      	movs	r2, #34	; 0x22
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80064fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4a5b      	ldr	r2, [pc, #364]	; (8006678 <HAL_I2C_Mem_Read+0x228>)
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650e:	88f8      	ldrh	r0, [r7, #6]
 8006510:	893a      	ldrh	r2, [r7, #8]
 8006512:	8979      	ldrh	r1, [r7, #10]
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4603      	mov	r3, r0
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fa50 	bl	80069c4 <I2C_RequestMemoryRead>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1b0      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d113      	bne.n	800655e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e184      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006562:	2b01      	cmp	r3, #1
 8006564:	d11b      	bne.n	800659e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e164      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d11b      	bne.n	80065de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	e144      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065f4:	e138      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	f200 80f1 	bhi.w	80067e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	2b01      	cmp	r3, #1
 8006606:	d123      	bne.n	8006650 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fc17 	bl	8006e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e139      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800664e:	e10b      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006654:	2b02      	cmp	r3, #2
 8006656:	d14e      	bne.n	80066f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	2200      	movs	r2, #0
 8006660:	4906      	ldr	r1, [pc, #24]	; (800667c <HAL_I2C_Mem_Read+0x22c>)
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa94 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e10e      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
 8006672:	bf00      	nop
 8006674:	00100002 	.word	0x00100002
 8006678:	ffff0000 	.word	0xffff0000
 800667c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f4:	e0b8      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2200      	movs	r2, #0
 80066fe:	4966      	ldr	r1, [pc, #408]	; (8006898 <HAL_I2C_Mem_Read+0x448>)
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fa45 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0bf      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	2200      	movs	r2, #0
 800675a:	494f      	ldr	r1, [pc, #316]	; (8006898 <HAL_I2C_Mem_Read+0x448>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fa17 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e091      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e0:	e042      	b.n	8006868 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fb2a 	bl	8006e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e04c      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b04      	cmp	r3, #4
 8006834:	d118      	bne.n	8006868 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	f47f aec2 	bne.w	80065f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3728      	adds	r7, #40	; 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	00010004 	.word	0x00010004

0800689c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	4608      	mov	r0, r1
 80068a6:	4611      	mov	r1, r2
 80068a8:	461a      	mov	r2, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	817b      	strh	r3, [r7, #10]
 80068ae:	460b      	mov	r3, r1
 80068b0:	813b      	strh	r3, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f95c 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e05f      	b.n	80069b8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068f8:	897b      	ldrh	r3, [r7, #10]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006906:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	6a3a      	ldr	r2, [r7, #32]
 800690c:	492c      	ldr	r1, [pc, #176]	; (80069c0 <I2C_RequestMemoryWrite+0x124>)
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f995 	bl	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e04c      	b.n	80069b8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006936:	6a39      	ldr	r1, [r7, #32]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f9ff 	bl	8006d3c <I2C_WaitOnTXEFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00d      	beq.n	8006960 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b04      	cmp	r3, #4
 800694a:	d107      	bne.n	800695c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e02b      	b.n	80069b8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006966:	893b      	ldrh	r3, [r7, #8]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	611a      	str	r2, [r3, #16]
 8006970:	e021      	b.n	80069b6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006972:	893b      	ldrh	r3, [r7, #8]
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	b29b      	uxth	r3, r3
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	6a39      	ldr	r1, [r7, #32]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f9d9 	bl	8006d3c <I2C_WaitOnTXEFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b04      	cmp	r3, #4
 8006996:	d107      	bne.n	80069a8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e005      	b.n	80069b8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069ac:	893b      	ldrh	r3, [r7, #8]
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	00010002 	.word	0x00010002

080069c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	4608      	mov	r0, r1
 80069ce:	4611      	mov	r1, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	817b      	strh	r3, [r7, #10]
 80069d6:	460b      	mov	r3, r1
 80069d8:	813b      	strh	r3, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f8c0 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00c      	beq.n	8006a30 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0a9      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a30:	897b      	ldrh	r3, [r7, #10]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	4951      	ldr	r1, [pc, #324]	; (8006b8c <I2C_RequestMemoryRead+0x1c8>)
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f8f9 	bl	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e096      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6e:	6a39      	ldr	r1, [r7, #32]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f963 	bl	8006d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00d      	beq.n	8006a98 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d107      	bne.n	8006a94 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e075      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d105      	bne.n	8006aaa <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9e:	893b      	ldrh	r3, [r7, #8]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	611a      	str	r2, [r3, #16]
 8006aa8:	e021      	b.n	8006aee <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006aaa:	893b      	ldrh	r3, [r7, #8]
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aba:	6a39      	ldr	r1, [r7, #32]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f93d 	bl	8006d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00d      	beq.n	8006ae4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d107      	bne.n	8006ae0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e04f      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af0:	6a39      	ldr	r1, [r7, #32]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f922 	bl	8006d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00d      	beq.n	8006b1a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d107      	bne.n	8006b16 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e034      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f82a 	bl	8006b90 <I2C_WaitOnFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00c      	beq.n	8006b5c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e013      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b5c:	897b      	ldrh	r3, [r7, #10]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	4906      	ldr	r1, [pc, #24]	; (8006b8c <I2C_RequestMemoryRead+0x1c8>)
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f863 	bl	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	00010002 	.word	0x00010002

08006b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ba0:	e025      	b.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba8:	d021      	beq.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fe fb99 	bl	80052e0 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e023      	b.n	8006c36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d10d      	bne.n	8006c14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	43da      	mvns	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4013      	ands	r3, r2
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bf0c      	ite	eq
 8006c0a:	2301      	moveq	r3, #1
 8006c0c:	2300      	movne	r3, #0
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	e00c      	b.n	8006c2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	43da      	mvns	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf0c      	ite	eq
 8006c26:	2301      	moveq	r3, #1
 8006c28:	2300      	movne	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d0b6      	beq.n	8006ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c4c:	e051      	b.n	8006cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5c:	d123      	bne.n	8006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f043 0204 	orr.w	r2, r3, #4
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e046      	b.n	8006d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cac:	d021      	beq.n	8006cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cae:	f7fe fb17 	bl	80052e0 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d116      	bne.n	8006cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e020      	b.n	8006d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	0c1b      	lsrs	r3, r3, #16
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10c      	bne.n	8006d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	43da      	mvns	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	e00b      	b.n	8006d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	43da      	mvns	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4013      	ands	r3, r2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d18d      	bne.n	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d48:	e02d      	b.n	8006da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f8ce 	bl	8006eec <I2C_IsAcknowledgeFailed>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e02d      	b.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d60:	d021      	beq.n	8006da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fe fabd 	bl	80052e0 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d116      	bne.n	8006da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e007      	b.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	d1ca      	bne.n	8006d4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dca:	e02d      	b.n	8006e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f88d 	bl	8006eec <I2C_IsAcknowledgeFailed>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e02d      	b.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006de2:	d021      	beq.n	8006e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de4:	f7fe fa7c 	bl	80052e0 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d116      	bne.n	8006e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	f043 0220 	orr.w	r2, r3, #32
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e007      	b.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d1ca      	bne.n	8006dcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e4c:	e042      	b.n	8006ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d119      	bne.n	8006e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0210 	mvn.w	r2, #16
 8006e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e029      	b.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e90:	f7fe fa26 	bl	80052e0 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d302      	bcc.n	8006ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d116      	bne.n	8006ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e007      	b.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d1b5      	bne.n	8006e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f02:	d11b      	bne.n	8006f3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	f043 0204 	orr.w	r2, r3, #4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e25b      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d075      	beq.n	8007056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f6a:	4ba3      	ldr	r3, [pc, #652]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d00c      	beq.n	8006f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f76:	4ba0      	ldr	r3, [pc, #640]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d112      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f82:	4b9d      	ldr	r3, [pc, #628]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8e:	d10b      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f90:	4b99      	ldr	r3, [pc, #612]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05b      	beq.n	8007054 <HAL_RCC_OscConfig+0x108>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d157      	bne.n	8007054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e236      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x74>
 8006fb2:	4b91      	ldr	r3, [pc, #580]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a90      	ldr	r2, [pc, #576]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e01d      	b.n	8006ffc <HAL_RCC_OscConfig+0xb0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x98>
 8006fca:	4b8b      	ldr	r3, [pc, #556]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a8a      	ldr	r2, [pc, #552]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	4b88      	ldr	r3, [pc, #544]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a87      	ldr	r2, [pc, #540]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e00b      	b.n	8006ffc <HAL_RCC_OscConfig+0xb0>
 8006fe4:	4b84      	ldr	r3, [pc, #528]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a83      	ldr	r2, [pc, #524]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	4b81      	ldr	r3, [pc, #516]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a80      	ldr	r2, [pc, #512]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d013      	beq.n	800702c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007004:	f7fe f96c 	bl	80052e0 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800700c:	f7fe f968 	bl	80052e0 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e1fb      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701e:	4b76      	ldr	r3, [pc, #472]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f0      	beq.n	800700c <HAL_RCC_OscConfig+0xc0>
 800702a:	e014      	b.n	8007056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702c:	f7fe f958 	bl	80052e0 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007034:	f7fe f954 	bl	80052e0 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b64      	cmp	r3, #100	; 0x64
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e1e7      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007046:	4b6c      	ldr	r3, [pc, #432]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0xe8>
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d063      	beq.n	800712a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007062:	4b65      	ldr	r3, [pc, #404]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 030c 	and.w	r3, r3, #12
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800706e:	4b62      	ldr	r3, [pc, #392]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007076:	2b08      	cmp	r3, #8
 8007078:	d11c      	bne.n	80070b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707a:	4b5f      	ldr	r3, [pc, #380]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d116      	bne.n	80070b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007086:	4b5c      	ldr	r3, [pc, #368]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_RCC_OscConfig+0x152>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d001      	beq.n	800709e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e1bb      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709e:	4b56      	ldr	r3, [pc, #344]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	4952      	ldr	r1, [pc, #328]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b2:	e03a      	b.n	800712a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070bc:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <HAL_RCC_OscConfig+0x2b0>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c2:	f7fe f90d 	bl	80052e0 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ca:	f7fe f909 	bl	80052e0 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e19c      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070dc:	4b46      	ldr	r3, [pc, #280]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e8:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4940      	ldr	r1, [pc, #256]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]
 80070fc:	e015      	b.n	800712a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070fe:	4b3f      	ldr	r3, [pc, #252]	; (80071fc <HAL_RCC_OscConfig+0x2b0>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fe f8ec 	bl	80052e0 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800710c:	f7fe f8e8 	bl	80052e0 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e17b      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800711e:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f0      	bne.n	800710c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d030      	beq.n	8007198 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d016      	beq.n	800716c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800713e:	4b30      	ldr	r3, [pc, #192]	; (8007200 <HAL_RCC_OscConfig+0x2b4>)
 8007140:	2201      	movs	r2, #1
 8007142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007144:	f7fe f8cc 	bl	80052e0 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800714c:	f7fe f8c8 	bl	80052e0 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e15b      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715e:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0x200>
 800716a:	e015      	b.n	8007198 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800716c:	4b24      	ldr	r3, [pc, #144]	; (8007200 <HAL_RCC_OscConfig+0x2b4>)
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007172:	f7fe f8b5 	bl	80052e0 <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800717a:	f7fe f8b1 	bl	80052e0 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e144      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800718c:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 800718e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1f0      	bne.n	800717a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80a0 	beq.w	80072e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10f      	bne.n	80071d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80071c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d2:	2301      	movs	r3, #1
 80071d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <HAL_RCC_OscConfig+0x2b8>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d121      	bne.n	8007226 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <HAL_RCC_OscConfig+0x2b8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a07      	ldr	r2, [pc, #28]	; (8007204 <HAL_RCC_OscConfig+0x2b8>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ee:	f7fe f877 	bl	80052e0 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f4:	e011      	b.n	800721a <HAL_RCC_OscConfig+0x2ce>
 80071f6:	bf00      	nop
 80071f8:	40023800 	.word	0x40023800
 80071fc:	42470000 	.word	0x42470000
 8007200:	42470e80 	.word	0x42470e80
 8007204:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007208:	f7fe f86a 	bl	80052e0 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e0fd      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800721a:	4b81      	ldr	r3, [pc, #516]	; (8007420 <HAL_RCC_OscConfig+0x4d4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f0      	beq.n	8007208 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d106      	bne.n	800723c <HAL_RCC_OscConfig+0x2f0>
 800722e:	4b7d      	ldr	r3, [pc, #500]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	4a7c      	ldr	r2, [pc, #496]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	6713      	str	r3, [r2, #112]	; 0x70
 800723a:	e01c      	b.n	8007276 <HAL_RCC_OscConfig+0x32a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b05      	cmp	r3, #5
 8007242:	d10c      	bne.n	800725e <HAL_RCC_OscConfig+0x312>
 8007244:	4b77      	ldr	r3, [pc, #476]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	4a76      	ldr	r2, [pc, #472]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 800724a:	f043 0304 	orr.w	r3, r3, #4
 800724e:	6713      	str	r3, [r2, #112]	; 0x70
 8007250:	4b74      	ldr	r3, [pc, #464]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007254:	4a73      	ldr	r2, [pc, #460]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	6713      	str	r3, [r2, #112]	; 0x70
 800725c:	e00b      	b.n	8007276 <HAL_RCC_OscConfig+0x32a>
 800725e:	4b71      	ldr	r3, [pc, #452]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	4a70      	ldr	r2, [pc, #448]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	6713      	str	r3, [r2, #112]	; 0x70
 800726a:	4b6e      	ldr	r3, [pc, #440]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 800726c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726e:	4a6d      	ldr	r2, [pc, #436]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727e:	f7fe f82f 	bl	80052e0 <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007284:	e00a      	b.n	800729c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007286:	f7fe f82b 	bl	80052e0 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f241 3288 	movw	r2, #5000	; 0x1388
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e0bc      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	4b61      	ldr	r3, [pc, #388]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 800729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0ee      	beq.n	8007286 <HAL_RCC_OscConfig+0x33a>
 80072a8:	e014      	b.n	80072d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072aa:	f7fe f819 	bl	80052e0 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b0:	e00a      	b.n	80072c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072b2:	f7fe f815 	bl	80052e0 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e0a6      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c8:	4b56      	ldr	r3, [pc, #344]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1ee      	bne.n	80072b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d105      	bne.n	80072e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072da:	4b52      	ldr	r3, [pc, #328]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	4a51      	ldr	r2, [pc, #324]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 80072e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8092 	beq.w	8007414 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072f0:	4b4c      	ldr	r3, [pc, #304]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 030c 	and.w	r3, r3, #12
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d05c      	beq.n	80073b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d141      	bne.n	8007388 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007304:	4b48      	ldr	r3, [pc, #288]	; (8007428 <HAL_RCC_OscConfig+0x4dc>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730a:	f7fd ffe9 	bl	80052e0 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007312:	f7fd ffe5 	bl	80052e0 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e078      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007324:	4b3f      	ldr	r3, [pc, #252]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	019b      	lsls	r3, r3, #6
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	3b01      	subs	r3, #1
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	061b      	lsls	r3, r3, #24
 8007354:	4933      	ldr	r1, [pc, #204]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 8007356:	4313      	orrs	r3, r2
 8007358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800735a:	4b33      	ldr	r3, [pc, #204]	; (8007428 <HAL_RCC_OscConfig+0x4dc>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007360:	f7fd ffbe 	bl	80052e0 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007368:	f7fd ffba 	bl	80052e0 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e04d      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0x41c>
 8007386:	e045      	b.n	8007414 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007388:	4b27      	ldr	r3, [pc, #156]	; (8007428 <HAL_RCC_OscConfig+0x4dc>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738e:	f7fd ffa7 	bl	80052e0 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007396:	f7fd ffa3 	bl	80052e0 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e036      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <HAL_RCC_OscConfig+0x44a>
 80073b4:	e02e      	b.n	8007414 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e029      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <HAL_RCC_OscConfig+0x4d8>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d11c      	bne.n	8007410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d115      	bne.n	8007410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073ea:	4013      	ands	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d10d      	bne.n	8007410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073fe:	429a      	cmp	r2, r3
 8007400:	d106      	bne.n	8007410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d001      	beq.n	8007414 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40007000 	.word	0x40007000
 8007424:	40023800 	.word	0x40023800
 8007428:	42470060 	.word	0x42470060

0800742c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0cc      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007440:	4b68      	ldr	r3, [pc, #416]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d90c      	bls.n	8007468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744e:	4b65      	ldr	r3, [pc, #404]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007456:	4b63      	ldr	r3, [pc, #396]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d001      	beq.n	8007468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0b8      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d020      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007480:	4b59      	ldr	r3, [pc, #356]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	4a58      	ldr	r2, [pc, #352]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800748a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007498:	4b53      	ldr	r3, [pc, #332]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4a52      	ldr	r2, [pc, #328]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a4:	4b50      	ldr	r3, [pc, #320]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	494d      	ldr	r1, [pc, #308]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d044      	beq.n	800754c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d107      	bne.n	80074da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ca:	4b47      	ldr	r3, [pc, #284]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d119      	bne.n	800750a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e07f      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d003      	beq.n	80074ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d107      	bne.n	80074fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ea:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e06f      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074fa:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e067      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800750a:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f023 0203 	bic.w	r2, r3, #3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4934      	ldr	r1, [pc, #208]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	4313      	orrs	r3, r2
 800751a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800751c:	f7fd fee0 	bl	80052e0 <HAL_GetTick>
 8007520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007522:	e00a      	b.n	800753a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007524:	f7fd fedc 	bl	80052e0 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007532:	4293      	cmp	r3, r2
 8007534:	d901      	bls.n	800753a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e04f      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753a:	4b2b      	ldr	r3, [pc, #172]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 020c 	and.w	r2, r3, #12
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	429a      	cmp	r2, r3
 800754a:	d1eb      	bne.n	8007524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800754c:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d20c      	bcs.n	8007574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800755a:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007562:	4b20      	ldr	r3, [pc, #128]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d001      	beq.n	8007574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e032      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007580:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4916      	ldr	r1, [pc, #88]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800758e:	4313      	orrs	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	490e      	ldr	r1, [pc, #56]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075b2:	f000 f821 	bl	80075f8 <HAL_RCC_GetSysClockFreq>
 80075b6:	4601      	mov	r1, r0
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	091b      	lsrs	r3, r3, #4
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <HAL_RCC_ClockConfig+0x1c0>)
 80075c4:	5cd3      	ldrb	r3, [r2, r3]
 80075c6:	fa21 f303 	lsr.w	r3, r1, r3
 80075ca:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <HAL_RCC_ClockConfig+0x1c4>)
 80075cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <HAL_RCC_ClockConfig+0x1c8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fd fe40 	bl	8005258 <HAL_InitTick>

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40023c00 	.word	0x40023c00
 80075e8:	40023800 	.word	0x40023800
 80075ec:	08008da8 	.word	0x08008da8
 80075f0:	20000008 	.word	0x20000008
 80075f4:	2000000c 	.word	0x2000000c

080075f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	2300      	movs	r3, #0
 8007608:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800760e:	4b50      	ldr	r3, [pc, #320]	; (8007750 <HAL_RCC_GetSysClockFreq+0x158>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 030c 	and.w	r3, r3, #12
 8007616:	2b04      	cmp	r3, #4
 8007618:	d007      	beq.n	800762a <HAL_RCC_GetSysClockFreq+0x32>
 800761a:	2b08      	cmp	r3, #8
 800761c:	d008      	beq.n	8007630 <HAL_RCC_GetSysClockFreq+0x38>
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 808d 	bne.w	800773e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007624:	4b4b      	ldr	r3, [pc, #300]	; (8007754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007626:	60bb      	str	r3, [r7, #8]
       break;
 8007628:	e08c      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800762a:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <HAL_RCC_GetSysClockFreq+0x160>)
 800762c:	60bb      	str	r3, [r7, #8]
      break;
 800762e:	e089      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007630:	4b47      	ldr	r3, [pc, #284]	; (8007750 <HAL_RCC_GetSysClockFreq+0x158>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007638:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800763a:	4b45      	ldr	r3, [pc, #276]	; (8007750 <HAL_RCC_GetSysClockFreq+0x158>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d023      	beq.n	800768e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007646:	4b42      	ldr	r3, [pc, #264]	; (8007750 <HAL_RCC_GetSysClockFreq+0x158>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	f04f 0400 	mov.w	r4, #0
 8007650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	ea03 0501 	and.w	r5, r3, r1
 800765c:	ea04 0602 	and.w	r6, r4, r2
 8007660:	4a3d      	ldr	r2, [pc, #244]	; (8007758 <HAL_RCC_GetSysClockFreq+0x160>)
 8007662:	fb02 f106 	mul.w	r1, r2, r6
 8007666:	2200      	movs	r2, #0
 8007668:	fb02 f205 	mul.w	r2, r2, r5
 800766c:	440a      	add	r2, r1
 800766e:	493a      	ldr	r1, [pc, #232]	; (8007758 <HAL_RCC_GetSysClockFreq+0x160>)
 8007670:	fba5 0101 	umull	r0, r1, r5, r1
 8007674:	1853      	adds	r3, r2, r1
 8007676:	4619      	mov	r1, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f04f 0400 	mov.w	r4, #0
 800767e:	461a      	mov	r2, r3
 8007680:	4623      	mov	r3, r4
 8007682:	f7f9 f9cf 	bl	8000a24 <__aeabi_uldivmod>
 8007686:	4603      	mov	r3, r0
 8007688:	460c      	mov	r4, r1
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e049      	b.n	8007722 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800768e:	4b30      	ldr	r3, [pc, #192]	; (8007750 <HAL_RCC_GetSysClockFreq+0x158>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	099b      	lsrs	r3, r3, #6
 8007694:	f04f 0400 	mov.w	r4, #0
 8007698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	ea03 0501 	and.w	r5, r3, r1
 80076a4:	ea04 0602 	and.w	r6, r4, r2
 80076a8:	4629      	mov	r1, r5
 80076aa:	4632      	mov	r2, r6
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	f04f 0400 	mov.w	r4, #0
 80076b4:	0154      	lsls	r4, r2, #5
 80076b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076ba:	014b      	lsls	r3, r1, #5
 80076bc:	4619      	mov	r1, r3
 80076be:	4622      	mov	r2, r4
 80076c0:	1b49      	subs	r1, r1, r5
 80076c2:	eb62 0206 	sbc.w	r2, r2, r6
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	f04f 0400 	mov.w	r4, #0
 80076ce:	0194      	lsls	r4, r2, #6
 80076d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076d4:	018b      	lsls	r3, r1, #6
 80076d6:	1a5b      	subs	r3, r3, r1
 80076d8:	eb64 0402 	sbc.w	r4, r4, r2
 80076dc:	f04f 0100 	mov.w	r1, #0
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	00e2      	lsls	r2, r4, #3
 80076e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076ea:	00d9      	lsls	r1, r3, #3
 80076ec:	460b      	mov	r3, r1
 80076ee:	4614      	mov	r4, r2
 80076f0:	195b      	adds	r3, r3, r5
 80076f2:	eb44 0406 	adc.w	r4, r4, r6
 80076f6:	f04f 0100 	mov.w	r1, #0
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	02a2      	lsls	r2, r4, #10
 8007700:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007704:	0299      	lsls	r1, r3, #10
 8007706:	460b      	mov	r3, r1
 8007708:	4614      	mov	r4, r2
 800770a:	4618      	mov	r0, r3
 800770c:	4621      	mov	r1, r4
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f04f 0400 	mov.w	r4, #0
 8007714:	461a      	mov	r2, r3
 8007716:	4623      	mov	r3, r4
 8007718:	f7f9 f984 	bl	8000a24 <__aeabi_uldivmod>
 800771c:	4603      	mov	r3, r0
 800771e:	460c      	mov	r4, r1
 8007720:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <HAL_RCC_GetSysClockFreq+0x158>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	0c1b      	lsrs	r3, r3, #16
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	3301      	adds	r3, #1
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	fbb2 f3f3 	udiv	r3, r2, r3
 800773a:	60bb      	str	r3, [r7, #8]
      break;
 800773c:	e002      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007740:	60bb      	str	r3, [r7, #8]
      break;
 8007742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007744:	68bb      	ldr	r3, [r7, #8]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800774e:	bf00      	nop
 8007750:	40023800 	.word	0x40023800
 8007754:	00f42400 	.word	0x00f42400
 8007758:	017d7840 	.word	0x017d7840

0800775c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007760:	4b03      	ldr	r3, [pc, #12]	; (8007770 <HAL_RCC_GetHCLKFreq+0x14>)
 8007762:	681b      	ldr	r3, [r3, #0]
}
 8007764:	4618      	mov	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000008 	.word	0x20000008

08007774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007778:	f7ff fff0 	bl	800775c <HAL_RCC_GetHCLKFreq>
 800777c:	4601      	mov	r1, r0
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	0a9b      	lsrs	r3, r3, #10
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	4a03      	ldr	r2, [pc, #12]	; (8007798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800778a:	5cd3      	ldrb	r3, [r2, r3]
 800778c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007790:	4618      	mov	r0, r3
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40023800 	.word	0x40023800
 8007798:	08008db8 	.word	0x08008db8

0800779c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077a0:	f7ff ffdc 	bl	800775c <HAL_RCC_GetHCLKFreq>
 80077a4:	4601      	mov	r1, r0
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	0b5b      	lsrs	r3, r3, #13
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	4a03      	ldr	r2, [pc, #12]	; (80077c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077b2:	5cd3      	ldrb	r3, [r2, r3]
 80077b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40023800 	.word	0x40023800
 80077c0:	08008db8 	.word	0x08008db8

080077c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e03f      	b.n	8007856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fd fb82 	bl	8004ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2224      	movs	r2, #36	; 0x24
 80077f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc2d 	bl	8008068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800781c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	695a      	ldr	r2, [r3, #20]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800782c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800783c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b20      	cmp	r3, #32
 8007878:	d153      	bne.n	8007922 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_UART_Transmit_DMA+0x26>
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e04c      	b.n	8007924 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_UART_Transmit_DMA+0x38>
 8007894:	2302      	movs	r3, #2
 8007896:	e045      	b.n	8007924 <HAL_UART_Transmit_DMA+0xc4>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	88fa      	ldrh	r2, [r7, #6]
 80078aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2221      	movs	r2, #33	; 0x21
 80078bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <HAL_UART_Transmit_DMA+0xcc>)
 80078c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	4a18      	ldr	r2, [pc, #96]	; (8007930 <HAL_UART_Transmit_DMA+0xd0>)
 80078ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	4a17      	ldr	r2, [pc, #92]	; (8007934 <HAL_UART_Transmit_DMA+0xd4>)
 80078d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	2200      	movs	r2, #0
 80078de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80078e0:	f107 0308 	add.w	r3, r7, #8
 80078e4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	6819      	ldr	r1, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3304      	adds	r3, #4
 80078f4:	461a      	mov	r2, r3
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	f7fd fee0 	bl	80056bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007904:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695a      	ldr	r2, [r3, #20]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800791c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	08007c75 	.word	0x08007c75
 8007930:	08007cc7 	.word	0x08007cc7
 8007934:	08007d67 	.word	0x08007d67

08007938 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b20      	cmp	r3, #32
 8007950:	d166      	bne.n	8007a20 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_UART_Receive_DMA+0x26>
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e05f      	b.n	8007a22 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UART_Receive_DMA+0x38>
 800796c:	2302      	movs	r3, #2
 800796e:	e058      	b.n	8007a22 <HAL_UART_Receive_DMA+0xea>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2222      	movs	r2, #34	; 0x22
 800798e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007996:	4a25      	ldr	r2, [pc, #148]	; (8007a2c <HAL_UART_Receive_DMA+0xf4>)
 8007998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799e:	4a24      	ldr	r2, [pc, #144]	; (8007a30 <HAL_UART_Receive_DMA+0xf8>)
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	4a23      	ldr	r2, [pc, #140]	; (8007a34 <HAL_UART_Receive_DMA+0xfc>)
 80079a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	2200      	movs	r2, #0
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80079b2:	f107 0308 	add.w	r3, r7, #8
 80079b6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	f7fd fe77 	bl	80056bc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e000      	b.n	8007a22 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007a20:	2302      	movs	r3, #2
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08007ce3 	.word	0x08007ce3
 8007a30:	08007d4b 	.word	0x08007d4b
 8007a34:	08007d67 	.word	0x08007d67

08007a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <HAL_UART_IRQHandler+0x52>
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa6f 	bl	8007f66 <UART_Receive_IT>
      return;
 8007a88:	e0d1      	b.n	8007c2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80b0 	beq.w	8007bf2 <HAL_UART_IRQHandler+0x1ba>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x70>
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80a5 	beq.w	8007bf2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x90>
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	f043 0201 	orr.w	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_UART_IRQHandler+0xb0>
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae0:	f043 0202 	orr.w	r2, r3, #2
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_UART_IRQHandler+0xd0>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b00:	f043 0204 	orr.w	r2, r3, #4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00f      	beq.n	8007b32 <HAL_UART_IRQHandler+0xfa>
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <HAL_UART_IRQHandler+0xee>
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2a:	f043 0208 	orr.w	r2, r3, #8
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d078      	beq.n	8007c2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <HAL_UART_IRQHandler+0x11c>
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa09 	bl	8007f66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <HAL_UART_IRQHandler+0x144>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d031      	beq.n	8007be0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f952 	bl	8007e26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	d123      	bne.n	8007bd8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695a      	ldr	r2, [r3, #20]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d013      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bac:	4a21      	ldr	r2, [pc, #132]	; (8007c34 <HAL_UART_IRQHandler+0x1fc>)
 8007bae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fd fdd9 	bl	800576c <HAL_DMA_Abort_IT>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d016      	beq.n	8007bee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bce:	e00e      	b.n	8007bee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f845 	bl	8007c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd6:	e00a      	b.n	8007bee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f841 	bl	8007c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bde:	e006      	b.n	8007bee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f83d 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007bec:	e01e      	b.n	8007c2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bee:	bf00      	nop
    return;
 8007bf0:	e01c      	b.n	8007c2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1d6>
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f93f 	bl	8007e8a <UART_Transmit_IT>
    return;
 8007c0c:	e00f      	b.n	8007c2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <HAL_UART_IRQHandler+0x1f6>
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f987 	bl	8007f36 <UART_EndTransmit_IT>
    return;
 8007c28:	bf00      	nop
 8007c2a:	e000      	b.n	8007c2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8007c2c:	bf00      	nop
  }
}
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	08007e63 	.word	0x08007e63

08007c38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d113      	bne.n	8007cb8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ca4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cb6:	e002      	b.n	8007cbe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7fc f9e7 	bl	800408c <HAL_UART_TxCpltCallback>
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff ffaf 	bl	8007c38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d11e      	bne.n	8007d3c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d12:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695a      	ldr	r2, [r3, #20]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d32:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7fc f9b7 	bl	80040b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff ff77 	bl	8007c4c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b80      	cmp	r3, #128	; 0x80
 8007d84:	bf0c      	ite	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	2300      	movne	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b21      	cmp	r3, #33	; 0x21
 8007d98:	d108      	bne.n	8007dac <UART_DMAError+0x46>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007da6:	68b8      	ldr	r0, [r7, #8]
 8007da8:	f000 f827 	bl	8007dfa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b40      	cmp	r3, #64	; 0x40
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b22      	cmp	r3, #34	; 0x22
 8007dcc:	d108      	bne.n	8007de0 <UART_DMAError+0x7a>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007dda:	68b8      	ldr	r0, [r7, #8]
 8007ddc:	f000 f823 	bl	8007e26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de4:	f043 0210 	orr.w	r2, r3, #16
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dec:	68b8      	ldr	r0, [r7, #8]
 8007dee:	f7ff ff37 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007e10:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695a      	ldr	r2, [r3, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0201 	bic.w	r2, r2, #1
 8007e4c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff feef 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b21      	cmp	r3, #33	; 0x21
 8007e9c:	d144      	bne.n	8007f28 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea6:	d11a      	bne.n	8007ede <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ebc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]
 8007ed0:	e00e      	b.n	8007ef0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	621a      	str	r2, [r3, #32]
 8007edc:	e008      	b.n	8007ef0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	1c59      	adds	r1, r3, #1
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6211      	str	r1, [r2, #32]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4619      	mov	r1, r3
 8007efe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10f      	bne.n	8007f24 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e000      	b.n	8007f2a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fc f898 	bl	800408c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b22      	cmp	r3, #34	; 0x22
 8007f78:	d171      	bne.n	800805e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f82:	d123      	bne.n	8007fcc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10e      	bne.n	8007fb0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	1c9a      	adds	r2, r3, #2
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
 8007fae:	e029      	b.n	8008004 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8007fca:	e01b      	b.n	8008004 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6858      	ldr	r0, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	1c59      	adds	r1, r3, #1
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6291      	str	r1, [r2, #40]	; 0x28
 8007fe4:	b2c2      	uxtb	r2, r0
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	e00c      	b.n	8008004 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	1c58      	adds	r0, r3, #1
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	6288      	str	r0, [r1, #40]	; 0x28
 8007ffc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29b      	uxth	r3, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008014:	2b00      	cmp	r3, #0
 8008016:	d120      	bne.n	800805a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0220 	bic.w	r2, r2, #32
 8008026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695a      	ldr	r2, [r3, #20]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fc f82d 	bl	80040b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	e002      	b.n	8008060 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e000      	b.n	8008060 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800805e:	2302      	movs	r3, #2
  }
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	b085      	sub	sp, #20
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80080aa:	f023 030c 	bic.w	r3, r3, #12
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	430b      	orrs	r3, r1
 80080b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d6:	f040 818b 	bne.w	80083f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4ac1      	ldr	r2, [pc, #772]	; (80083e4 <UART_SetConfig+0x37c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d005      	beq.n	80080f0 <UART_SetConfig+0x88>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4abf      	ldr	r2, [pc, #764]	; (80083e8 <UART_SetConfig+0x380>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	f040 80bd 	bne.w	800826a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080f0:	f7ff fb54 	bl	800779c <HAL_RCC_GetPCLK2Freq>
 80080f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	461d      	mov	r5, r3
 80080fa:	f04f 0600 	mov.w	r6, #0
 80080fe:	46a8      	mov	r8, r5
 8008100:	46b1      	mov	r9, r6
 8008102:	eb18 0308 	adds.w	r3, r8, r8
 8008106:	eb49 0409 	adc.w	r4, r9, r9
 800810a:	4698      	mov	r8, r3
 800810c:	46a1      	mov	r9, r4
 800810e:	eb18 0805 	adds.w	r8, r8, r5
 8008112:	eb49 0906 	adc.w	r9, r9, r6
 8008116:	f04f 0100 	mov.w	r1, #0
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008122:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008126:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800812a:	4688      	mov	r8, r1
 800812c:	4691      	mov	r9, r2
 800812e:	eb18 0005 	adds.w	r0, r8, r5
 8008132:	eb49 0106 	adc.w	r1, r9, r6
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	461d      	mov	r5, r3
 800813c:	f04f 0600 	mov.w	r6, #0
 8008140:	196b      	adds	r3, r5, r5
 8008142:	eb46 0406 	adc.w	r4, r6, r6
 8008146:	461a      	mov	r2, r3
 8008148:	4623      	mov	r3, r4
 800814a:	f7f8 fc6b 	bl	8000a24 <__aeabi_uldivmod>
 800814e:	4603      	mov	r3, r0
 8008150:	460c      	mov	r4, r1
 8008152:	461a      	mov	r2, r3
 8008154:	4ba5      	ldr	r3, [pc, #660]	; (80083ec <UART_SetConfig+0x384>)
 8008156:	fba3 2302 	umull	r2, r3, r3, r2
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	461d      	mov	r5, r3
 8008164:	f04f 0600 	mov.w	r6, #0
 8008168:	46a9      	mov	r9, r5
 800816a:	46b2      	mov	sl, r6
 800816c:	eb19 0309 	adds.w	r3, r9, r9
 8008170:	eb4a 040a 	adc.w	r4, sl, sl
 8008174:	4699      	mov	r9, r3
 8008176:	46a2      	mov	sl, r4
 8008178:	eb19 0905 	adds.w	r9, r9, r5
 800817c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800818c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008194:	4689      	mov	r9, r1
 8008196:	4692      	mov	sl, r2
 8008198:	eb19 0005 	adds.w	r0, r9, r5
 800819c:	eb4a 0106 	adc.w	r1, sl, r6
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	461d      	mov	r5, r3
 80081a6:	f04f 0600 	mov.w	r6, #0
 80081aa:	196b      	adds	r3, r5, r5
 80081ac:	eb46 0406 	adc.w	r4, r6, r6
 80081b0:	461a      	mov	r2, r3
 80081b2:	4623      	mov	r3, r4
 80081b4:	f7f8 fc36 	bl	8000a24 <__aeabi_uldivmod>
 80081b8:	4603      	mov	r3, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	461a      	mov	r2, r3
 80081be:	4b8b      	ldr	r3, [pc, #556]	; (80083ec <UART_SetConfig+0x384>)
 80081c0:	fba3 1302 	umull	r1, r3, r3, r2
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	2164      	movs	r1, #100	; 0x64
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	3332      	adds	r3, #50	; 0x32
 80081d2:	4a86      	ldr	r2, [pc, #536]	; (80083ec <UART_SetConfig+0x384>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081e0:	4498      	add	r8, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	461d      	mov	r5, r3
 80081e6:	f04f 0600 	mov.w	r6, #0
 80081ea:	46a9      	mov	r9, r5
 80081ec:	46b2      	mov	sl, r6
 80081ee:	eb19 0309 	adds.w	r3, r9, r9
 80081f2:	eb4a 040a 	adc.w	r4, sl, sl
 80081f6:	4699      	mov	r9, r3
 80081f8:	46a2      	mov	sl, r4
 80081fa:	eb19 0905 	adds.w	r9, r9, r5
 80081fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8008202:	f04f 0100 	mov.w	r1, #0
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800820e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008216:	4689      	mov	r9, r1
 8008218:	4692      	mov	sl, r2
 800821a:	eb19 0005 	adds.w	r0, r9, r5
 800821e:	eb4a 0106 	adc.w	r1, sl, r6
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	461d      	mov	r5, r3
 8008228:	f04f 0600 	mov.w	r6, #0
 800822c:	196b      	adds	r3, r5, r5
 800822e:	eb46 0406 	adc.w	r4, r6, r6
 8008232:	461a      	mov	r2, r3
 8008234:	4623      	mov	r3, r4
 8008236:	f7f8 fbf5 	bl	8000a24 <__aeabi_uldivmod>
 800823a:	4603      	mov	r3, r0
 800823c:	460c      	mov	r4, r1
 800823e:	461a      	mov	r2, r3
 8008240:	4b6a      	ldr	r3, [pc, #424]	; (80083ec <UART_SetConfig+0x384>)
 8008242:	fba3 1302 	umull	r1, r3, r3, r2
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	2164      	movs	r1, #100	; 0x64
 800824a:	fb01 f303 	mul.w	r3, r1, r3
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	3332      	adds	r3, #50	; 0x32
 8008254:	4a65      	ldr	r2, [pc, #404]	; (80083ec <UART_SetConfig+0x384>)
 8008256:	fba2 2303 	umull	r2, r3, r2, r3
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	f003 0207 	and.w	r2, r3, #7
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4442      	add	r2, r8
 8008266:	609a      	str	r2, [r3, #8]
 8008268:	e26f      	b.n	800874a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800826a:	f7ff fa83 	bl	8007774 <HAL_RCC_GetPCLK1Freq>
 800826e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	461d      	mov	r5, r3
 8008274:	f04f 0600 	mov.w	r6, #0
 8008278:	46a8      	mov	r8, r5
 800827a:	46b1      	mov	r9, r6
 800827c:	eb18 0308 	adds.w	r3, r8, r8
 8008280:	eb49 0409 	adc.w	r4, r9, r9
 8008284:	4698      	mov	r8, r3
 8008286:	46a1      	mov	r9, r4
 8008288:	eb18 0805 	adds.w	r8, r8, r5
 800828c:	eb49 0906 	adc.w	r9, r9, r6
 8008290:	f04f 0100 	mov.w	r1, #0
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800829c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082a4:	4688      	mov	r8, r1
 80082a6:	4691      	mov	r9, r2
 80082a8:	eb18 0005 	adds.w	r0, r8, r5
 80082ac:	eb49 0106 	adc.w	r1, r9, r6
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	461d      	mov	r5, r3
 80082b6:	f04f 0600 	mov.w	r6, #0
 80082ba:	196b      	adds	r3, r5, r5
 80082bc:	eb46 0406 	adc.w	r4, r6, r6
 80082c0:	461a      	mov	r2, r3
 80082c2:	4623      	mov	r3, r4
 80082c4:	f7f8 fbae 	bl	8000a24 <__aeabi_uldivmod>
 80082c8:	4603      	mov	r3, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	461a      	mov	r2, r3
 80082ce:	4b47      	ldr	r3, [pc, #284]	; (80083ec <UART_SetConfig+0x384>)
 80082d0:	fba3 2302 	umull	r2, r3, r3, r2
 80082d4:	095b      	lsrs	r3, r3, #5
 80082d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	461d      	mov	r5, r3
 80082de:	f04f 0600 	mov.w	r6, #0
 80082e2:	46a9      	mov	r9, r5
 80082e4:	46b2      	mov	sl, r6
 80082e6:	eb19 0309 	adds.w	r3, r9, r9
 80082ea:	eb4a 040a 	adc.w	r4, sl, sl
 80082ee:	4699      	mov	r9, r3
 80082f0:	46a2      	mov	sl, r4
 80082f2:	eb19 0905 	adds.w	r9, r9, r5
 80082f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80082fa:	f04f 0100 	mov.w	r1, #0
 80082fe:	f04f 0200 	mov.w	r2, #0
 8008302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800830a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800830e:	4689      	mov	r9, r1
 8008310:	4692      	mov	sl, r2
 8008312:	eb19 0005 	adds.w	r0, r9, r5
 8008316:	eb4a 0106 	adc.w	r1, sl, r6
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	461d      	mov	r5, r3
 8008320:	f04f 0600 	mov.w	r6, #0
 8008324:	196b      	adds	r3, r5, r5
 8008326:	eb46 0406 	adc.w	r4, r6, r6
 800832a:	461a      	mov	r2, r3
 800832c:	4623      	mov	r3, r4
 800832e:	f7f8 fb79 	bl	8000a24 <__aeabi_uldivmod>
 8008332:	4603      	mov	r3, r0
 8008334:	460c      	mov	r4, r1
 8008336:	461a      	mov	r2, r3
 8008338:	4b2c      	ldr	r3, [pc, #176]	; (80083ec <UART_SetConfig+0x384>)
 800833a:	fba3 1302 	umull	r1, r3, r3, r2
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	2164      	movs	r1, #100	; 0x64
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	3332      	adds	r3, #50	; 0x32
 800834c:	4a27      	ldr	r2, [pc, #156]	; (80083ec <UART_SetConfig+0x384>)
 800834e:	fba2 2303 	umull	r2, r3, r2, r3
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800835a:	4498      	add	r8, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	461d      	mov	r5, r3
 8008360:	f04f 0600 	mov.w	r6, #0
 8008364:	46a9      	mov	r9, r5
 8008366:	46b2      	mov	sl, r6
 8008368:	eb19 0309 	adds.w	r3, r9, r9
 800836c:	eb4a 040a 	adc.w	r4, sl, sl
 8008370:	4699      	mov	r9, r3
 8008372:	46a2      	mov	sl, r4
 8008374:	eb19 0905 	adds.w	r9, r9, r5
 8008378:	eb4a 0a06 	adc.w	sl, sl, r6
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008388:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800838c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008390:	4689      	mov	r9, r1
 8008392:	4692      	mov	sl, r2
 8008394:	eb19 0005 	adds.w	r0, r9, r5
 8008398:	eb4a 0106 	adc.w	r1, sl, r6
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	461d      	mov	r5, r3
 80083a2:	f04f 0600 	mov.w	r6, #0
 80083a6:	196b      	adds	r3, r5, r5
 80083a8:	eb46 0406 	adc.w	r4, r6, r6
 80083ac:	461a      	mov	r2, r3
 80083ae:	4623      	mov	r3, r4
 80083b0:	f7f8 fb38 	bl	8000a24 <__aeabi_uldivmod>
 80083b4:	4603      	mov	r3, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	461a      	mov	r2, r3
 80083ba:	4b0c      	ldr	r3, [pc, #48]	; (80083ec <UART_SetConfig+0x384>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	3332      	adds	r3, #50	; 0x32
 80083ce:	4a07      	ldr	r2, [pc, #28]	; (80083ec <UART_SetConfig+0x384>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f003 0207 	and.w	r2, r3, #7
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4442      	add	r2, r8
 80083e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80083e2:	e1b2      	b.n	800874a <UART_SetConfig+0x6e2>
 80083e4:	40011000 	.word	0x40011000
 80083e8:	40011400 	.word	0x40011400
 80083ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4ad7      	ldr	r2, [pc, #860]	; (8008754 <UART_SetConfig+0x6ec>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d005      	beq.n	8008406 <UART_SetConfig+0x39e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4ad6      	ldr	r2, [pc, #856]	; (8008758 <UART_SetConfig+0x6f0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	f040 80d1 	bne.w	80085a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008406:	f7ff f9c9 	bl	800779c <HAL_RCC_GetPCLK2Freq>
 800840a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	469a      	mov	sl, r3
 8008410:	f04f 0b00 	mov.w	fp, #0
 8008414:	46d0      	mov	r8, sl
 8008416:	46d9      	mov	r9, fp
 8008418:	eb18 0308 	adds.w	r3, r8, r8
 800841c:	eb49 0409 	adc.w	r4, r9, r9
 8008420:	4698      	mov	r8, r3
 8008422:	46a1      	mov	r9, r4
 8008424:	eb18 080a 	adds.w	r8, r8, sl
 8008428:	eb49 090b 	adc.w	r9, r9, fp
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800843c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008440:	4688      	mov	r8, r1
 8008442:	4691      	mov	r9, r2
 8008444:	eb1a 0508 	adds.w	r5, sl, r8
 8008448:	eb4b 0609 	adc.w	r6, fp, r9
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4619      	mov	r1, r3
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	f04f 0400 	mov.w	r4, #0
 800845e:	0094      	lsls	r4, r2, #2
 8008460:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008464:	008b      	lsls	r3, r1, #2
 8008466:	461a      	mov	r2, r3
 8008468:	4623      	mov	r3, r4
 800846a:	4628      	mov	r0, r5
 800846c:	4631      	mov	r1, r6
 800846e:	f7f8 fad9 	bl	8000a24 <__aeabi_uldivmod>
 8008472:	4603      	mov	r3, r0
 8008474:	460c      	mov	r4, r1
 8008476:	461a      	mov	r2, r3
 8008478:	4bb8      	ldr	r3, [pc, #736]	; (800875c <UART_SetConfig+0x6f4>)
 800847a:	fba3 2302 	umull	r2, r3, r3, r2
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	469b      	mov	fp, r3
 8008488:	f04f 0c00 	mov.w	ip, #0
 800848c:	46d9      	mov	r9, fp
 800848e:	46e2      	mov	sl, ip
 8008490:	eb19 0309 	adds.w	r3, r9, r9
 8008494:	eb4a 040a 	adc.w	r4, sl, sl
 8008498:	4699      	mov	r9, r3
 800849a:	46a2      	mov	sl, r4
 800849c:	eb19 090b 	adds.w	r9, r9, fp
 80084a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084a4:	f04f 0100 	mov.w	r1, #0
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084b8:	4689      	mov	r9, r1
 80084ba:	4692      	mov	sl, r2
 80084bc:	eb1b 0509 	adds.w	r5, fp, r9
 80084c0:	eb4c 060a 	adc.w	r6, ip, sl
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4619      	mov	r1, r3
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	f04f 0300 	mov.w	r3, #0
 80084d2:	f04f 0400 	mov.w	r4, #0
 80084d6:	0094      	lsls	r4, r2, #2
 80084d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084dc:	008b      	lsls	r3, r1, #2
 80084de:	461a      	mov	r2, r3
 80084e0:	4623      	mov	r3, r4
 80084e2:	4628      	mov	r0, r5
 80084e4:	4631      	mov	r1, r6
 80084e6:	f7f8 fa9d 	bl	8000a24 <__aeabi_uldivmod>
 80084ea:	4603      	mov	r3, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	461a      	mov	r2, r3
 80084f0:	4b9a      	ldr	r3, [pc, #616]	; (800875c <UART_SetConfig+0x6f4>)
 80084f2:	fba3 1302 	umull	r1, r3, r3, r2
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	2164      	movs	r1, #100	; 0x64
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	011b      	lsls	r3, r3, #4
 8008502:	3332      	adds	r3, #50	; 0x32
 8008504:	4a95      	ldr	r2, [pc, #596]	; (800875c <UART_SetConfig+0x6f4>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008510:	4498      	add	r8, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	469b      	mov	fp, r3
 8008516:	f04f 0c00 	mov.w	ip, #0
 800851a:	46d9      	mov	r9, fp
 800851c:	46e2      	mov	sl, ip
 800851e:	eb19 0309 	adds.w	r3, r9, r9
 8008522:	eb4a 040a 	adc.w	r4, sl, sl
 8008526:	4699      	mov	r9, r3
 8008528:	46a2      	mov	sl, r4
 800852a:	eb19 090b 	adds.w	r9, r9, fp
 800852e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008532:	f04f 0100 	mov.w	r1, #0
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800853e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008546:	4689      	mov	r9, r1
 8008548:	4692      	mov	sl, r2
 800854a:	eb1b 0509 	adds.w	r5, fp, r9
 800854e:	eb4c 060a 	adc.w	r6, ip, sl
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	4619      	mov	r1, r3
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	f04f 0400 	mov.w	r4, #0
 8008564:	0094      	lsls	r4, r2, #2
 8008566:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800856a:	008b      	lsls	r3, r1, #2
 800856c:	461a      	mov	r2, r3
 800856e:	4623      	mov	r3, r4
 8008570:	4628      	mov	r0, r5
 8008572:	4631      	mov	r1, r6
 8008574:	f7f8 fa56 	bl	8000a24 <__aeabi_uldivmod>
 8008578:	4603      	mov	r3, r0
 800857a:	460c      	mov	r4, r1
 800857c:	461a      	mov	r2, r3
 800857e:	4b77      	ldr	r3, [pc, #476]	; (800875c <UART_SetConfig+0x6f4>)
 8008580:	fba3 1302 	umull	r1, r3, r3, r2
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	2164      	movs	r1, #100	; 0x64
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	3332      	adds	r3, #50	; 0x32
 8008592:	4a72      	ldr	r2, [pc, #456]	; (800875c <UART_SetConfig+0x6f4>)
 8008594:	fba2 2303 	umull	r2, r3, r2, r3
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	f003 020f 	and.w	r2, r3, #15
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4442      	add	r2, r8
 80085a4:	609a      	str	r2, [r3, #8]
 80085a6:	e0d0      	b.n	800874a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80085a8:	f7ff f8e4 	bl	8007774 <HAL_RCC_GetPCLK1Freq>
 80085ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	469a      	mov	sl, r3
 80085b2:	f04f 0b00 	mov.w	fp, #0
 80085b6:	46d0      	mov	r8, sl
 80085b8:	46d9      	mov	r9, fp
 80085ba:	eb18 0308 	adds.w	r3, r8, r8
 80085be:	eb49 0409 	adc.w	r4, r9, r9
 80085c2:	4698      	mov	r8, r3
 80085c4:	46a1      	mov	r9, r4
 80085c6:	eb18 080a 	adds.w	r8, r8, sl
 80085ca:	eb49 090b 	adc.w	r9, r9, fp
 80085ce:	f04f 0100 	mov.w	r1, #0
 80085d2:	f04f 0200 	mov.w	r2, #0
 80085d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085e2:	4688      	mov	r8, r1
 80085e4:	4691      	mov	r9, r2
 80085e6:	eb1a 0508 	adds.w	r5, sl, r8
 80085ea:	eb4b 0609 	adc.w	r6, fp, r9
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	4619      	mov	r1, r3
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	f04f 0400 	mov.w	r4, #0
 8008600:	0094      	lsls	r4, r2, #2
 8008602:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008606:	008b      	lsls	r3, r1, #2
 8008608:	461a      	mov	r2, r3
 800860a:	4623      	mov	r3, r4
 800860c:	4628      	mov	r0, r5
 800860e:	4631      	mov	r1, r6
 8008610:	f7f8 fa08 	bl	8000a24 <__aeabi_uldivmod>
 8008614:	4603      	mov	r3, r0
 8008616:	460c      	mov	r4, r1
 8008618:	461a      	mov	r2, r3
 800861a:	4b50      	ldr	r3, [pc, #320]	; (800875c <UART_SetConfig+0x6f4>)
 800861c:	fba3 2302 	umull	r2, r3, r3, r2
 8008620:	095b      	lsrs	r3, r3, #5
 8008622:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	469b      	mov	fp, r3
 800862a:	f04f 0c00 	mov.w	ip, #0
 800862e:	46d9      	mov	r9, fp
 8008630:	46e2      	mov	sl, ip
 8008632:	eb19 0309 	adds.w	r3, r9, r9
 8008636:	eb4a 040a 	adc.w	r4, sl, sl
 800863a:	4699      	mov	r9, r3
 800863c:	46a2      	mov	sl, r4
 800863e:	eb19 090b 	adds.w	r9, r9, fp
 8008642:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008646:	f04f 0100 	mov.w	r1, #0
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800865a:	4689      	mov	r9, r1
 800865c:	4692      	mov	sl, r2
 800865e:	eb1b 0509 	adds.w	r5, fp, r9
 8008662:	eb4c 060a 	adc.w	r6, ip, sl
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4619      	mov	r1, r3
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	f04f 0300 	mov.w	r3, #0
 8008674:	f04f 0400 	mov.w	r4, #0
 8008678:	0094      	lsls	r4, r2, #2
 800867a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800867e:	008b      	lsls	r3, r1, #2
 8008680:	461a      	mov	r2, r3
 8008682:	4623      	mov	r3, r4
 8008684:	4628      	mov	r0, r5
 8008686:	4631      	mov	r1, r6
 8008688:	f7f8 f9cc 	bl	8000a24 <__aeabi_uldivmod>
 800868c:	4603      	mov	r3, r0
 800868e:	460c      	mov	r4, r1
 8008690:	461a      	mov	r2, r3
 8008692:	4b32      	ldr	r3, [pc, #200]	; (800875c <UART_SetConfig+0x6f4>)
 8008694:	fba3 1302 	umull	r1, r3, r3, r2
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	2164      	movs	r1, #100	; 0x64
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	3332      	adds	r3, #50	; 0x32
 80086a6:	4a2d      	ldr	r2, [pc, #180]	; (800875c <UART_SetConfig+0x6f4>)
 80086a8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086b2:	4498      	add	r8, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	469b      	mov	fp, r3
 80086b8:	f04f 0c00 	mov.w	ip, #0
 80086bc:	46d9      	mov	r9, fp
 80086be:	46e2      	mov	sl, ip
 80086c0:	eb19 0309 	adds.w	r3, r9, r9
 80086c4:	eb4a 040a 	adc.w	r4, sl, sl
 80086c8:	4699      	mov	r9, r3
 80086ca:	46a2      	mov	sl, r4
 80086cc:	eb19 090b 	adds.w	r9, r9, fp
 80086d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086d4:	f04f 0100 	mov.w	r1, #0
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086e8:	4689      	mov	r9, r1
 80086ea:	4692      	mov	sl, r2
 80086ec:	eb1b 0509 	adds.w	r5, fp, r9
 80086f0:	eb4c 060a 	adc.w	r6, ip, sl
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4619      	mov	r1, r3
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	f04f 0400 	mov.w	r4, #0
 8008706:	0094      	lsls	r4, r2, #2
 8008708:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800870c:	008b      	lsls	r3, r1, #2
 800870e:	461a      	mov	r2, r3
 8008710:	4623      	mov	r3, r4
 8008712:	4628      	mov	r0, r5
 8008714:	4631      	mov	r1, r6
 8008716:	f7f8 f985 	bl	8000a24 <__aeabi_uldivmod>
 800871a:	4603      	mov	r3, r0
 800871c:	460c      	mov	r4, r1
 800871e:	461a      	mov	r2, r3
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <UART_SetConfig+0x6f4>)
 8008722:	fba3 1302 	umull	r1, r3, r3, r2
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	2164      	movs	r1, #100	; 0x64
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	3332      	adds	r3, #50	; 0x32
 8008734:	4a09      	ldr	r2, [pc, #36]	; (800875c <UART_SetConfig+0x6f4>)
 8008736:	fba2 2303 	umull	r2, r3, r2, r3
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4442      	add	r2, r8
 8008746:	609a      	str	r2, [r3, #8]
}
 8008748:	e7ff      	b.n	800874a <UART_SetConfig+0x6e2>
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008754:	40011000 	.word	0x40011000
 8008758:	40011400 	.word	0x40011400
 800875c:	51eb851f 	.word	0x51eb851f

08008760 <__cxa_pure_virtual>:
 8008760:	b508      	push	{r3, lr}
 8008762:	f000 f80d 	bl	8008780 <_ZSt9terminatev>

08008766 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008766:	b508      	push	{r3, lr}
 8008768:	4780      	blx	r0
 800876a:	f000 f80e 	bl	800878a <abort>
	...

08008770 <_ZSt13get_terminatev>:
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <_ZSt13get_terminatev+0xc>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	f3bf 8f5b 	dmb	ish
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000014 	.word	0x20000014

08008780 <_ZSt9terminatev>:
 8008780:	b508      	push	{r3, lr}
 8008782:	f7ff fff5 	bl	8008770 <_ZSt13get_terminatev>
 8008786:	f7ff ffee 	bl	8008766 <_ZN10__cxxabiv111__terminateEPFvvE>

0800878a <abort>:
 800878a:	b508      	push	{r3, lr}
 800878c:	2006      	movs	r0, #6
 800878e:	f000 f871 	bl	8008874 <raise>
 8008792:	2001      	movs	r0, #1
 8008794:	f7fc fcc8 	bl	8005128 <_exit>

08008798 <__errno>:
 8008798:	4b01      	ldr	r3, [pc, #4]	; (80087a0 <__errno+0x8>)
 800879a:	6818      	ldr	r0, [r3, #0]
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20000018 	.word	0x20000018

080087a4 <__libc_init_array>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4e0d      	ldr	r6, [pc, #52]	; (80087dc <__libc_init_array+0x38>)
 80087a8:	4c0d      	ldr	r4, [pc, #52]	; (80087e0 <__libc_init_array+0x3c>)
 80087aa:	1ba4      	subs	r4, r4, r6
 80087ac:	10a4      	asrs	r4, r4, #2
 80087ae:	2500      	movs	r5, #0
 80087b0:	42a5      	cmp	r5, r4
 80087b2:	d109      	bne.n	80087c8 <__libc_init_array+0x24>
 80087b4:	4e0b      	ldr	r6, [pc, #44]	; (80087e4 <__libc_init_array+0x40>)
 80087b6:	4c0c      	ldr	r4, [pc, #48]	; (80087e8 <__libc_init_array+0x44>)
 80087b8:	f000 f960 	bl	8008a7c <_init>
 80087bc:	1ba4      	subs	r4, r4, r6
 80087be:	10a4      	asrs	r4, r4, #2
 80087c0:	2500      	movs	r5, #0
 80087c2:	42a5      	cmp	r5, r4
 80087c4:	d105      	bne.n	80087d2 <__libc_init_array+0x2e>
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087cc:	4798      	blx	r3
 80087ce:	3501      	adds	r5, #1
 80087d0:	e7ee      	b.n	80087b0 <__libc_init_array+0xc>
 80087d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087d6:	4798      	blx	r3
 80087d8:	3501      	adds	r5, #1
 80087da:	e7f2      	b.n	80087c2 <__libc_init_array+0x1e>
 80087dc:	08008dd0 	.word	0x08008dd0
 80087e0:	08008dd0 	.word	0x08008dd0
 80087e4:	08008dd0 	.word	0x08008dd0
 80087e8:	08008dd8 	.word	0x08008dd8

080087ec <memcpy>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	1e43      	subs	r3, r0, #1
 80087f0:	440a      	add	r2, r1
 80087f2:	4291      	cmp	r1, r2
 80087f4:	d100      	bne.n	80087f8 <memcpy+0xc>
 80087f6:	bd10      	pop	{r4, pc}
 80087f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008800:	e7f7      	b.n	80087f2 <memcpy+0x6>

08008802 <memset>:
 8008802:	4402      	add	r2, r0
 8008804:	4603      	mov	r3, r0
 8008806:	4293      	cmp	r3, r2
 8008808:	d100      	bne.n	800880c <memset+0xa>
 800880a:	4770      	bx	lr
 800880c:	f803 1b01 	strb.w	r1, [r3], #1
 8008810:	e7f9      	b.n	8008806 <memset+0x4>
	...

08008814 <realloc>:
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <realloc+0xc>)
 8008816:	460a      	mov	r2, r1
 8008818:	4601      	mov	r1, r0
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	f000 b8a0 	b.w	8008960 <_realloc_r>
 8008820:	20000018 	.word	0x20000018

08008824 <_raise_r>:
 8008824:	291f      	cmp	r1, #31
 8008826:	b538      	push	{r3, r4, r5, lr}
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	d904      	bls.n	8008838 <_raise_r+0x14>
 800882e:	2316      	movs	r3, #22
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800883a:	b112      	cbz	r2, 8008842 <_raise_r+0x1e>
 800883c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008840:	b94b      	cbnz	r3, 8008856 <_raise_r+0x32>
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f830 	bl	80088a8 <_getpid_r>
 8008848:	462a      	mov	r2, r5
 800884a:	4601      	mov	r1, r0
 800884c:	4620      	mov	r0, r4
 800884e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008852:	f000 b817 	b.w	8008884 <_kill_r>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d00a      	beq.n	8008870 <_raise_r+0x4c>
 800885a:	1c59      	adds	r1, r3, #1
 800885c:	d103      	bne.n	8008866 <_raise_r+0x42>
 800885e:	2316      	movs	r3, #22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	2001      	movs	r0, #1
 8008864:	e7e7      	b.n	8008836 <_raise_r+0x12>
 8008866:	2400      	movs	r4, #0
 8008868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800886c:	4628      	mov	r0, r5
 800886e:	4798      	blx	r3
 8008870:	2000      	movs	r0, #0
 8008872:	e7e0      	b.n	8008836 <_raise_r+0x12>

08008874 <raise>:
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <raise+0xc>)
 8008876:	4601      	mov	r1, r0
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f7ff bfd3 	b.w	8008824 <_raise_r>
 800887e:	bf00      	nop
 8008880:	20000018 	.word	0x20000018

08008884 <_kill_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4c07      	ldr	r4, [pc, #28]	; (80088a4 <_kill_r+0x20>)
 8008888:	2300      	movs	r3, #0
 800888a:	4605      	mov	r5, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	f7fc fc39 	bl	8005108 <_kill>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d102      	bne.n	80088a0 <_kill_r+0x1c>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	b103      	cbz	r3, 80088a0 <_kill_r+0x1c>
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
 80088a2:	bf00      	nop
 80088a4:	20000ccc 	.word	0x20000ccc

080088a8 <_getpid_r>:
 80088a8:	f7fc bc26 	b.w	80050f8 <_getpid>

080088ac <_malloc_r>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	1ccd      	adds	r5, r1, #3
 80088b0:	f025 0503 	bic.w	r5, r5, #3
 80088b4:	3508      	adds	r5, #8
 80088b6:	2d0c      	cmp	r5, #12
 80088b8:	bf38      	it	cc
 80088ba:	250c      	movcc	r5, #12
 80088bc:	2d00      	cmp	r5, #0
 80088be:	4606      	mov	r6, r0
 80088c0:	db01      	blt.n	80088c6 <_malloc_r+0x1a>
 80088c2:	42a9      	cmp	r1, r5
 80088c4:	d903      	bls.n	80088ce <_malloc_r+0x22>
 80088c6:	230c      	movs	r3, #12
 80088c8:	6033      	str	r3, [r6, #0]
 80088ca:	2000      	movs	r0, #0
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	f000 f87d 	bl	80089cc <__malloc_lock>
 80088d2:	4a21      	ldr	r2, [pc, #132]	; (8008958 <_malloc_r+0xac>)
 80088d4:	6814      	ldr	r4, [r2, #0]
 80088d6:	4621      	mov	r1, r4
 80088d8:	b991      	cbnz	r1, 8008900 <_malloc_r+0x54>
 80088da:	4c20      	ldr	r4, [pc, #128]	; (800895c <_malloc_r+0xb0>)
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	b91b      	cbnz	r3, 80088e8 <_malloc_r+0x3c>
 80088e0:	4630      	mov	r0, r6
 80088e2:	f000 f863 	bl	80089ac <_sbrk_r>
 80088e6:	6020      	str	r0, [r4, #0]
 80088e8:	4629      	mov	r1, r5
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 f85e 	bl	80089ac <_sbrk_r>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d124      	bne.n	800893e <_malloc_r+0x92>
 80088f4:	230c      	movs	r3, #12
 80088f6:	6033      	str	r3, [r6, #0]
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f868 	bl	80089ce <__malloc_unlock>
 80088fe:	e7e4      	b.n	80088ca <_malloc_r+0x1e>
 8008900:	680b      	ldr	r3, [r1, #0]
 8008902:	1b5b      	subs	r3, r3, r5
 8008904:	d418      	bmi.n	8008938 <_malloc_r+0x8c>
 8008906:	2b0b      	cmp	r3, #11
 8008908:	d90f      	bls.n	800892a <_malloc_r+0x7e>
 800890a:	600b      	str	r3, [r1, #0]
 800890c:	50cd      	str	r5, [r1, r3]
 800890e:	18cc      	adds	r4, r1, r3
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f85c 	bl	80089ce <__malloc_unlock>
 8008916:	f104 000b 	add.w	r0, r4, #11
 800891a:	1d23      	adds	r3, r4, #4
 800891c:	f020 0007 	bic.w	r0, r0, #7
 8008920:	1ac3      	subs	r3, r0, r3
 8008922:	d0d3      	beq.n	80088cc <_malloc_r+0x20>
 8008924:	425a      	negs	r2, r3
 8008926:	50e2      	str	r2, [r4, r3]
 8008928:	e7d0      	b.n	80088cc <_malloc_r+0x20>
 800892a:	428c      	cmp	r4, r1
 800892c:	684b      	ldr	r3, [r1, #4]
 800892e:	bf16      	itet	ne
 8008930:	6063      	strne	r3, [r4, #4]
 8008932:	6013      	streq	r3, [r2, #0]
 8008934:	460c      	movne	r4, r1
 8008936:	e7eb      	b.n	8008910 <_malloc_r+0x64>
 8008938:	460c      	mov	r4, r1
 800893a:	6849      	ldr	r1, [r1, #4]
 800893c:	e7cc      	b.n	80088d8 <_malloc_r+0x2c>
 800893e:	1cc4      	adds	r4, r0, #3
 8008940:	f024 0403 	bic.w	r4, r4, #3
 8008944:	42a0      	cmp	r0, r4
 8008946:	d005      	beq.n	8008954 <_malloc_r+0xa8>
 8008948:	1a21      	subs	r1, r4, r0
 800894a:	4630      	mov	r0, r6
 800894c:	f000 f82e 	bl	80089ac <_sbrk_r>
 8008950:	3001      	adds	r0, #1
 8008952:	d0cf      	beq.n	80088f4 <_malloc_r+0x48>
 8008954:	6025      	str	r5, [r4, #0]
 8008956:	e7db      	b.n	8008910 <_malloc_r+0x64>
 8008958:	20000cc0 	.word	0x20000cc0
 800895c:	20000cc4 	.word	0x20000cc4

08008960 <_realloc_r>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	4607      	mov	r7, r0
 8008964:	4614      	mov	r4, r2
 8008966:	460e      	mov	r6, r1
 8008968:	b921      	cbnz	r1, 8008974 <_realloc_r+0x14>
 800896a:	4611      	mov	r1, r2
 800896c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008970:	f7ff bf9c 	b.w	80088ac <_malloc_r>
 8008974:	b922      	cbnz	r2, 8008980 <_realloc_r+0x20>
 8008976:	f000 f82b 	bl	80089d0 <_free_r>
 800897a:	4625      	mov	r5, r4
 800897c:	4628      	mov	r0, r5
 800897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008980:	f000 f874 	bl	8008a6c <_malloc_usable_size_r>
 8008984:	42a0      	cmp	r0, r4
 8008986:	d20f      	bcs.n	80089a8 <_realloc_r+0x48>
 8008988:	4621      	mov	r1, r4
 800898a:	4638      	mov	r0, r7
 800898c:	f7ff ff8e 	bl	80088ac <_malloc_r>
 8008990:	4605      	mov	r5, r0
 8008992:	2800      	cmp	r0, #0
 8008994:	d0f2      	beq.n	800897c <_realloc_r+0x1c>
 8008996:	4631      	mov	r1, r6
 8008998:	4622      	mov	r2, r4
 800899a:	f7ff ff27 	bl	80087ec <memcpy>
 800899e:	4631      	mov	r1, r6
 80089a0:	4638      	mov	r0, r7
 80089a2:	f000 f815 	bl	80089d0 <_free_r>
 80089a6:	e7e9      	b.n	800897c <_realloc_r+0x1c>
 80089a8:	4635      	mov	r5, r6
 80089aa:	e7e7      	b.n	800897c <_realloc_r+0x1c>

080089ac <_sbrk_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4c06      	ldr	r4, [pc, #24]	; (80089c8 <_sbrk_r+0x1c>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4605      	mov	r5, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	f7fc fbc0 	bl	800513c <_sbrk>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_sbrk_r+0x1a>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_sbrk_r+0x1a>
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	20000ccc 	.word	0x20000ccc

080089cc <__malloc_lock>:
 80089cc:	4770      	bx	lr

080089ce <__malloc_unlock>:
 80089ce:	4770      	bx	lr

080089d0 <_free_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4605      	mov	r5, r0
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d045      	beq.n	8008a64 <_free_r+0x94>
 80089d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089dc:	1f0c      	subs	r4, r1, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	18e4      	addlt	r4, r4, r3
 80089e4:	f7ff fff2 	bl	80089cc <__malloc_lock>
 80089e8:	4a1f      	ldr	r2, [pc, #124]	; (8008a68 <_free_r+0x98>)
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	4610      	mov	r0, r2
 80089ee:	b933      	cbnz	r3, 80089fe <_free_r+0x2e>
 80089f0:	6063      	str	r3, [r4, #4]
 80089f2:	6014      	str	r4, [r2, #0]
 80089f4:	4628      	mov	r0, r5
 80089f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089fa:	f7ff bfe8 	b.w	80089ce <__malloc_unlock>
 80089fe:	42a3      	cmp	r3, r4
 8008a00:	d90c      	bls.n	8008a1c <_free_r+0x4c>
 8008a02:	6821      	ldr	r1, [r4, #0]
 8008a04:	1862      	adds	r2, r4, r1
 8008a06:	4293      	cmp	r3, r2
 8008a08:	bf04      	itt	eq
 8008a0a:	681a      	ldreq	r2, [r3, #0]
 8008a0c:	685b      	ldreq	r3, [r3, #4]
 8008a0e:	6063      	str	r3, [r4, #4]
 8008a10:	bf04      	itt	eq
 8008a12:	1852      	addeq	r2, r2, r1
 8008a14:	6022      	streq	r2, [r4, #0]
 8008a16:	6004      	str	r4, [r0, #0]
 8008a18:	e7ec      	b.n	80089f4 <_free_r+0x24>
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	b10a      	cbz	r2, 8008a24 <_free_r+0x54>
 8008a20:	42a2      	cmp	r2, r4
 8008a22:	d9fa      	bls.n	8008a1a <_free_r+0x4a>
 8008a24:	6819      	ldr	r1, [r3, #0]
 8008a26:	1858      	adds	r0, r3, r1
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d10b      	bne.n	8008a44 <_free_r+0x74>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	4401      	add	r1, r0
 8008a30:	1858      	adds	r0, r3, r1
 8008a32:	4282      	cmp	r2, r0
 8008a34:	6019      	str	r1, [r3, #0]
 8008a36:	d1dd      	bne.n	80089f4 <_free_r+0x24>
 8008a38:	6810      	ldr	r0, [r2, #0]
 8008a3a:	6852      	ldr	r2, [r2, #4]
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	4401      	add	r1, r0
 8008a40:	6019      	str	r1, [r3, #0]
 8008a42:	e7d7      	b.n	80089f4 <_free_r+0x24>
 8008a44:	d902      	bls.n	8008a4c <_free_r+0x7c>
 8008a46:	230c      	movs	r3, #12
 8008a48:	602b      	str	r3, [r5, #0]
 8008a4a:	e7d3      	b.n	80089f4 <_free_r+0x24>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	1821      	adds	r1, r4, r0
 8008a50:	428a      	cmp	r2, r1
 8008a52:	bf04      	itt	eq
 8008a54:	6811      	ldreq	r1, [r2, #0]
 8008a56:	6852      	ldreq	r2, [r2, #4]
 8008a58:	6062      	str	r2, [r4, #4]
 8008a5a:	bf04      	itt	eq
 8008a5c:	1809      	addeq	r1, r1, r0
 8008a5e:	6021      	streq	r1, [r4, #0]
 8008a60:	605c      	str	r4, [r3, #4]
 8008a62:	e7c7      	b.n	80089f4 <_free_r+0x24>
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	20000cc0 	.word	0x20000cc0

08008a6c <_malloc_usable_size_r>:
 8008a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a70:	1f18      	subs	r0, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	bfbc      	itt	lt
 8008a76:	580b      	ldrlt	r3, [r1, r0]
 8008a78:	18c0      	addlt	r0, r0, r3
 8008a7a:	4770      	bx	lr

08008a7c <_init>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr

08008a88 <_fini>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr
